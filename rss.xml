<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[한 그릇]]></title><description><![CDATA[웹 읽고 보기 좋게 보여주는 기술]]></description><link>https://afrontend.github.io</link><generator>metalsmith-feed</generator><lastBuildDate>Fri, 08 Feb 2019 12:53:53 GMT</lastBuildDate><atom:link href="https://afrontend.github.io/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[웹 데이터를 카드 모양으로 나타내기]]></title><description><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <title>웹 데이터를 카드 모양으로 나타내기 - 한 그릇</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="msvalidate.01" content="20E9379AD2F60C867A2E376C373DD815" />
    <meta name="naver-site-verification" content="a8a8aaf072a0436c79f3d6cdacb82112b253e81f"/>
    <meta property="og:type" content="website">
    <meta property="og:title" content="한 그릇">
    <meta property="og:description" content="웹 읽고 보기 좋게 보여주는 기술">
    <meta property="og:image" content="https://afrontend.github.io/images/afrontend.png">
    <meta property="og:url" content="https://afrontend.github.io">
    
    <!-- Google Fonts -->
    <!--<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">-->
    
    <!-- CSS Reset -->
    <!--<link rel="stylesheet" href="//cdn.rawgit.com/necolas/normalize.css/master/normalize.css">-->
    
    <!-- Milligram CSS minified -->
    <!--<link rel="stylesheet" href="//cdn.rawgit.com/milligram/milligram/master/dist/milligram.min.css">-->
    
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.7.0/styles/default.min.css">
    
    <!--<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/flexboxgrid/6.3.1/flexboxgrid.min.css" type="text/css" >-->
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/mini.css/2.3.4/mini-default.min.css">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    
    <!-- You should properly set the path from the main file. -->
    
    <link rel="stylesheet" href="../css/blog.css">
    <link rel="stylesheet" href="../css/custom_gist.css">
    <link href="https://fonts.googleapis.com/css?family=Nanum+Gothic" rel="stylesheet">
    
    <!-- Global Site Tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-81660498-2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
    
      gtag('config', 'UA-81660498-2');
    </script>
  </head>
  <body>
    <div class="header_bar" >
      <div class="header">
        <div class="float-left" >
          <a href="/index.html" title="웹 데이터를 읽고 좋게 보여주는 기술">모든 글</a>
          &nbsp;&bull;&nbsp;
          <a href="/about" title="">저는</a>
          &nbsp;&bull;&nbsp;
          <a href="https://afrontend.github.io/rss" title="">RSS</a>
        </div>
      </div>
    </div>
    <div class="post">
        <br>
        <div class="post_title"> 웹 데이터를 카드 모양으로 나타내기 </div>
        <!--<div class="post_line"></div>-->
        <div class="post_date">2017-10-07 by <a href="/about">Afrontend</a></div>
        <br>
      <div class="post_content">
        <h2 id="-">웹 데이터 표시</h2>
<p><a href="https://afrontend.github.io/posts/blog-hit-count/">블로그를 읽은 횟수</a>는 텍스트 정보다.</p>
<blockquote>
<p>2,049 hits</p>
</blockquote>
<p>같은 데이터라도 다이어그램 혹은 그래프등을 사용하여 꾸미면 더욱 이해하기 쉬우며
이 정보를 웹에서 볼 수 있다면 여러 장치에서 읽을 수 있어서 접근성도 좋아진다고 생각한다.
그래서 이 데이터를 HTML5 형식으로 바꾸고 브라우저로 읽을 수 있도록 <a href="https://data-card.herokuapp.com/">웹 서비스</a>로 만들려고 한다.
그 과정을 정리했다.</p>
<h2 id="-node-js-">블로그 읽은 횟수를 Node.js를 사용하여 읽기</h2>
<p>아래 명령어는 <a href="https://afrontend.github.io/posts/blog-hit-count/">터미널에서 웹 데이터를 읽는 방식</a>임으로 Node.js에서 바로 동작할 수 없다.
우선 자바스크립트 코드로 변경하겠다.</p>
<pre><code>curl -s https://agvim.wordpress.com/ | hgrep -t &#39;#blog-stats-18 &gt; ul &gt; li&#39;</code></pre><p>터미널에서 읽는 방식이나 Node.js에서 읽는 방식이나 둘 다 아래  데이터를 사용하는 것은 같다.</p>
<table>
<thead>
<tr>
<th>테이터 항목</th>
<th>값</th>
</tr>
</thead>
<tbody><tr>
<td>URL</td>
<td><a href="https://agvim.wordpress.com/">https://agvim.wordpress.com/</a></td>
</tr>
<tr>
<td>CSS selector</td>
<td>#blog-stats-18 &gt; ul &gt; li</td>
</tr>
</tbody></table>
<p>임의의 디렉토리에 아래 파일을 저장한다.</p>
<pre><code class="hljs javascript"><span class="hljs-comment">// readCount.js</span>
<span class="hljs-keyword">var</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">'request'</span>);
request(<span class="hljs-string">'https://agvim.wordpress.com/'</span>,
  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{
    <span class="hljs-keyword">const</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cheerio'</span>)
    <span class="hljs-keyword">const</span> $ = cheerio.load(body);
    <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">'#blog-stats-18 &gt; ul &gt; li'</span>).text());
  });</code></pre>

<p>테스트 전에 추가 모듈을 설치한다.</p>
<pre><code>npm install request cheerio</code></pre><p>노드로 실행하면 블로그 읽은 횟수를 보여준다.</p>
<pre><code>$ node readCount.js
2,049 hits</code></pre><p>이 파일 일부 코드를 사용할 예정이다.</p>
<h2 id="node-js-">Node.js 웹 서버</h2>
<p>브라우저 접속을 지원하려면 웹 서버가 필요하다.
웹 서버로 Node.js를 사용할 텐데 내장 모듈인 <code>http</code> 대신 <a href="http://expressjs.com/ko">Express</a> 모듈을 사용하겠다.
<a href="https://nodejs.org/ko/">노드 설치</a>가 필요하다.
프로젝트 디렉토리를 만든다.</p>
<pre><code>mkdir /tmp/data-card &amp;&amp; cd /tmp/data-card</code></pre><p>전역으로 express 를 설치한다.</p>
<pre><code>npm install express -g</code></pre><p>Express 초기 파일을 생성한다.</p>
<pre><code>express --hbs</code></pre><p>Express가 사용할 모듈들을 설치한다.</p>
<pre><code>npm install</code></pre><p>웹 서버를 수행하여 브라우저 접속을 확인한다.</p>
<pre><code>npm start</code></pre><p><a href="http://localhost:3000">http://localhost:3000</a> 로 접속하면 “Express” 문구를 확인할 수 있다.</p>
<pre><code>Express

Welcome to Express</code></pre><p>웹 서버를 중지하기 위하여 <kbd>Ctrl-c</kbd> 를 입력한다.</p>
<p>위의 “Express” 문구는 routes/index.js 파일에 저장되어 있으며 이 파일은 views/layout.hbs 파일을 템블릿으로 사용한다.
“Express” 문구 대신 readCount.js로 읽은 웹 데이터를 표시하기 위해 routes/index.js 파일 내용을 변경한다.</p>
<pre><code class="hljs sh">data-card $ tree
routes
   index.js</code></pre>

<pre><code class="hljs javascript"><span class="hljs-comment">//routes/index.js</span>
<span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);
<span class="hljs-keyword">var</span> router = express.Router();

<span class="hljs-comment">/* GET home page. */</span>
router.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>{

  <span class="hljs-keyword">var</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">'request'</span>);
  request(<span class="hljs-string">'https://agvim.wordpress.com/'</span>,
    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{
      <span class="hljs-keyword">const</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cheerio'</span>)
      <span class="hljs-keyword">const</span> $ = cheerio.load(body);
      <span class="hljs-keyword">var</span> count = $(<span class="hljs-string">'#blog-stats-18 &gt; ul &gt; li'</span>).text();
      <span class="hljs-built_in">console</span>.log(count);
      res.render(<span class="hljs-string">'index'</span>, { <span class="hljs-attr">title</span>: count });
    });
});

<span class="hljs-built_in">module</span>.exports = router;</code></pre>

<p>사용할 모듈을 설치한다.</p>
<pre><code>npm install request cheerio --save</code></pre><p>웹 서버를 다시 수행한다.</p>
<pre><code>npm start</code></pre><p><a href="http://localhost:3000">http://localhost:3000</a> 로 접속하면 “Express” 문구 대신 블로그 읽은 횟수를 확인할 수 있다.</p>
<pre><code>2,049 hits

Welcome to 2,049 hits</code></pre><p>웹 서버를 중지하기 위하여 <kbd>Ctrl-c</kbd> 를 입력한다.</p>
<h2 id="html5-">HTML5 페이지 준비</h2>
<p>웹 서버에서 웹 데이터를 읽고 브라우저로 보여주는 기능이 완성되었다.
이제 CSS을 사용하여 카드 모양으로 표시할 텐데 여러 HTML5 시작 코드 중에 <a href="https://html5boilerplate.com">HTML5 Boilerplate</a>를 선택했다.
이 파일을 다운 받아 public 디렉터리에 저장한다.</p>
<pre><code>cd public
wget https://github.com/h5bp/html5-boilerplate/releases/download/6.0.1/html5-boilerplate_v6.0.1.zip
unzip html5-boilerplate_v6.0.1.zip
rm html5-boilerplate_v6.0.1.zip</code></pre><pre><code class="hljs sh">data-card $ tree
app.js
public
   index.html</code></pre>

<p>public/index.html 파일의 일부분을</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello world! This is HTML5 Boilerplate.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre>

<p>“2,049 hits” 로 대체하자. 이 후에 이 값을 웹에서 읽어온 값으로 대체할 예정이다.
HTML 태그를 <code>div</code>로 변경하고 클래스 이름을 추가한다.</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"data-card"</span>&gt;</span>2,049 hits<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>

<p>public/index.html 파일의 <code>head</code> 테그 안에  아래 코드를 추가하고</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"css/box.css"</span>&gt;</span></code></pre>

<p>새로운 css 파일을 만든다.
클래스 이름 “data-card”에 적용할 css 파일을 만든다.
크기를 고정하고 카드 모양으로 그림자를 넣었다.
그리고 텍스트를 가운데 위치했다.</p>
<pre><code class="hljs sh">data-card $ tree
app.js
public
   css
      box.css
   index.html</code></pre>

<pre><code><span class="hljs-comment">/*public/css/box.css*/</span>
@<span class="hljs-keyword">import</span> url(<span class="hljs-string">'https://fonts.googleapis.com/css?family=Work+Sans'</span>);

<span class="hljs-selector-class">.data-card</span> {
  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(0,0,0,0.2);
  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'Work Sans'</span>, sans-serif;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;
  <span class="hljs-attribute">height</span>: <span class="hljs-number">15rem</span>;
  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">15rem</span>;
  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;
  <span class="hljs-attribute">text-align</span>: center;
  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.3s</span>;
  <span class="hljs-attribute">width</span>: <span class="hljs-number">15rem</span>;
}

<span class="hljs-selector-class">.data-card</span><span class="hljs-selector-pseudo">:hover</span> {
  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">16px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(0,0,0,0.2);
}</code></pre>

<p>이제 다시 웹 서버를 수행한다.</p>
<pre><code>cd /tmp/data-card
npm start</code></pre><p>브라우저로 <a href="http://localhost:3000">http://localhost:3000</a> 로 접속하면 카드 모양의 “2,049 hits” 문구를 확인할 수 있다.</p>
<h2 id="-">웹에서 읽은 데이터를 브라우저에서 읽기</h2>
<p>이제 남은 작업은 한 가지다.
웹에서 읽은 데이터를 public/index.html 파일에 삽입하는 단계가 남았다.
Express는 직접 public/index.html 정적 파일을 수정하지 않는다.
템블릿이라는 파일을 사용하여 웹 데이터를 삽입하는데 views/index.hbs 파일을 수정하여 블로그 읽은 횟수를 전달할 수 있다.</p>
<pre><code class="hljs html"><span class="hljs-comment">&lt;!--views/index.hbs--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Welcome to {{title}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre>

<p>이 파일은 Express 모듈에 의하여 사용되는 템플릿 파일로 {{,  }} 이 값으로 둘러 쌓인 문자열은 routes/index.js가 전달하는 변수다.
이 변수를 사용하여 웹 데이터가 전달된다.
hbs 확장자는 이 파일이 <a href="http://handlebarsjs.com">handlebars</a> 템플릿임을 의미한다.
public/index.html 파일을 views/index.hbs 파일로 이름을 변경하여 옮긴다.</p>
<pre><code class="hljs sh">data-card $ tree
app.js
public
   css
      box.css
routes
   index.js
 views
    index.hbs</code></pre>

<pre><code>mv public/index.html views/index.hbs</code></pre><p>views/index.hbs의 블로그 읽은 횟수 부분을 수정한다.</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"data-card"</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>

<p>웹 서버를 수행한다.</p>
<pre><code>npm start</code></pre><p>브라우저로 <a href="http://localhost:3000">http://localhost:3000</a> 로 접속하면 “2,049 hits” 보다 조금 많은 블로그 읽은 횟수를 확인할 수 있다.</p>
<p><img src="/images/data-card.png" alt="블로그 읽은 횟수" title="웹 데이터 카드 모양으로 표시하기"></p>
<h2 id="-">마무리</h2>
<p>웹 데이터를 브라우저에서 읽을 수 있도록 여러 작업을 진행했다.</p>
<ul>
<li>웹 데이터 서버에서 읽기</li>
<li>웹 서버 만들기</li>
<li>웹 데이터 CSS로 꾸미기</li>
</ul>
<p><a href="http://expressjs.com/ko">Express</a>와 <a href="https://html5boilerplate.com">HTML5 Boilerplate</a>를 사용하여 작은 서비스를 만들었다.
<a href="https://github.com/afrontend/data-card">전체 코드</a>를 다운로드하여 살펴보거나 <a href="https://data-card.herokuapp.com/">온라인</a>에서 확인할 수 있다.
온라인 서버는 무료 서버에서 동작함으로 잠들어 있다면 10초 정도 로딩 시간이 걸릴 수 있다.</p>

      </div>
      <br>
      <div>
        <a href="https://github.com/afrontend" title="GitHub"><img style="width:20px;height:20px;" src="https://agvim.files.wordpress.com/2015/08/github-mark-32px.png" alt="github.com/afrontend"></a>&nbsp;<a href="https://github.com/afrontend" title="GitHub"></a>
        <a href="https://agvim.wordpress.com" title="또 다른 블로그, Afrontend Blog"><img style="width:20px;height:20px;" src="https://agvim.files.wordpress.com/2017/10/wordpress-logo-32-blue.png" alt="https://agvim.wordpress.com/"></a>&nbsp;<a href="https://agvim.wordpress.com/" title="또 다른 블로그, Afrontend Blog"></a>
        <!--<a href="http://feeds.feedburner.com/AfrontendWebData" title="피드 구독하기" rel="alternate"><img style="width:20px;height:20px;" src="https://feedburner.google.com/fb/images/pub/feed-icon32x32.png" alt="" /></a>&nbsp;<a href="http://feeds.feedburner.com/AfrontendWebData" title="피드 구독하기" rel="alternate"></a>-->
        <!--<a href="https://feedburner.google.com/fb/a/mailverify?uri=AfrontendWebData&loc=en_US" title="이메일로 글을 받아 볼 수 있어요" rel="alternate" style="text-decoration: none"><span style="font-size:25px;">@</span> </a>-->
      </div>
      <br>
      <div id="disqus_thread"></div>
      <script>

      /**
      *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
      *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
      /*
      var disqus_config = function () {
      this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
      this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
      };
      */
      (function() { // DON'T EDIT BELOW THIS LINE
      var d = document, s = d.createElement('script');
      s.src = 'https://afrontend-github-io.disqus.com/embed.js';
      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
      })();
      </script>
      <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
      <div class="footer">
      </div>
    </div>
    <script id="dsq-count-scr" src="//afrontend-github-io.disqus.com/count.js" async></script>
  </body>
</html>
]]></description><link>https://afrontend.github.io/posts/data-card</link><guid isPermaLink="true">https://afrontend.github.io/posts/data-card</guid><pubDate>Sat, 07 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[정적 사이트 생성기 - Metalsmith]]></title><description><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <title>정적 사이트 생성기 - Metalsmith - 한 그릇</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="msvalidate.01" content="20E9379AD2F60C867A2E376C373DD815" />
    <meta name="naver-site-verification" content="a8a8aaf072a0436c79f3d6cdacb82112b253e81f"/>
    <meta property="og:type" content="website">
    <meta property="og:title" content="한 그릇">
    <meta property="og:description" content="웹 읽고 보기 좋게 보여주는 기술">
    <meta property="og:image" content="https://afrontend.github.io/images/afrontend.png">
    <meta property="og:url" content="https://afrontend.github.io">
    
    <!-- Google Fonts -->
    <!--<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">-->
    
    <!-- CSS Reset -->
    <!--<link rel="stylesheet" href="//cdn.rawgit.com/necolas/normalize.css/master/normalize.css">-->
    
    <!-- Milligram CSS minified -->
    <!--<link rel="stylesheet" href="//cdn.rawgit.com/milligram/milligram/master/dist/milligram.min.css">-->
    
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.7.0/styles/default.min.css">
    
    <!--<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/flexboxgrid/6.3.1/flexboxgrid.min.css" type="text/css" >-->
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/mini.css/2.3.4/mini-default.min.css">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    
    <!-- You should properly set the path from the main file. -->
    
    <link rel="stylesheet" href="../css/blog.css">
    <link rel="stylesheet" href="../css/custom_gist.css">
    <link href="https://fonts.googleapis.com/css?family=Nanum+Gothic" rel="stylesheet">
    
    <!-- Global Site Tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-81660498-2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
    
      gtag('config', 'UA-81660498-2');
    </script>
  </head>
  <body>
    <div class="header_bar" >
      <div class="header">
        <div class="float-left" >
          <a href="/index.html" title="웹 데이터를 읽고 좋게 보여주는 기술">모든 글</a>
          &nbsp;&bull;&nbsp;
          <a href="/about" title="">저는</a>
          &nbsp;&bull;&nbsp;
          <a href="https://afrontend.github.io/rss" title="">RSS</a>
        </div>
      </div>
    </div>
    <div class="post">
        <br>
        <div class="post_title"> 정적 사이트 생성기 - Metalsmith </div>
        <!--<div class="post_line"></div>-->
        <div class="post_date">2017-10-06 by <a href="/about">Afrontend</a></div>
        <br>
      <div class="post_content">
        <h2 id="static-site-generator">Static Site Generator</h2>
<p><a href="https://agvim.wordpress.com/">워드프레스에서 글을 쓰고</a> 있는데 조금 더 가벼운 툴을 찾기로 했다.
<a href="https://agvim.wordpress.com/2017/09/20/wordpress-tip-3/">가입형 워드프레스를 무료로 사용</a>하면서 약간의 불편함을 느끼고 있었다.</p>
<ul>
<li>제한된 무료 테마만 사용해야 한다.</li>
<li>소스 코드 표현이 자유롭지 못하다.</li>
<li>플러그인을 사용할 수 없다.</li>
<li>광고가 붙는다.</li>
</ul>
<p>더불어 웹과 관련된 글만 따로 모으려는 목적도 있었다.
그래서 워드프레스 대신 정적 사이트 생성기(<a href="https://davidwalsh.name/introduction-static-site-generators">Static Site Generator</a>)를 사용하기로 결정했다.
워드프레스와 다른 점이 있다.</p>
<ul>
<li>글의 내용을 데이터베이스에 저장하지 않는다.</li>
<li>빌드에 의해서 생성된다.</li>
<li>관리 페이지가 없다.</li>
<li>온라인에서 글을 쓸 수 없다.</li>
<li>서버와 통신이 없음으로 최소한의 웹 서버 기능만 필요하다.</li>
</ul>
<p>어떻게 보면 워드프레스에 비해 기능이 제한되는 것 같지만 거꾸로 꼭 필요한 기능만 내가 조립하는 즐거움이 있다고도 볼 수 있다.
이 툴을 사용하여 만들어진 파일들을 웹 서버에 올려서 블로그 서비스를 제공할 수 있다.
내가 선택한 <a href="https://pages.github.com">GitHub Pages</a>도 이런 파일을 올릴 수 있는 웹 서버의 한 예다.
<strong>S</strong>tatic <strong>S</strong>ite <strong>G</strong>enerator는 종류가 많아서 <a href="https://www.staticgen.com/">고르는 게</a> 일이다.
생각보다 여러 프로그래밍 언어로 개발되는 것을 보고 놀랐는데 주로 자바스크립트를 사용해서 그런지 자바스크립트로 만들어진 것을 찾게 되었다.
이전에 <a href="https://agvim.wordpress.com/2017/09/19/hubpress-%EC%84%A4%EC%B9%98%EB%A5%BC-%ED%8F%AC%EA%B8%B0%ED%95%9C-%EC%9D%B4%EC%9C%A0/">HubPress 설치에 실패</a>했고 다시 <a href="https://hexo.io/ko/index.html">Hexo</a>에 도전했다.
Hexo는 워드프레스 테마를 보는 느낌이어서 친숙했지만 소스 코드의 동작하는 모습이 금방 눈에 들어오지 않아서 결국 좀 더 이해하기 쉬운 <a href="http://www.metalsmith.io/">Metalsmith</a>로 변경했다.</p>
<h2 id="metalsmith">Metalsmith</h2>
<p><a href="http://www.metalsmith.io/">Metalsmith</a>는 정말로 작다.
처음 자바스크립트를 만났을 때의 느낌 딱 그것이다
Metalsmith의 자바스크립트 코드는 약 400라인이다.
최소한의 기능만 가지고 나머지는 플러그인을 통해서 지원하는 방식이다.
플러그인을 사용하는 방식이 <a href="http://expressjs.com/ko/">Express</a>에서 미들웨어 사용하는 방식과 비슷하다.
파이프라인으로 지나가는 파일들을 각각의 플러그인 함수가 처리하는 방법으로 동작하는데 Metalsmith chain이라고 한다.
어떤 플러그인을 적용할지 결정하면 된다.
4개의 Node.js 모듈과 하나의 자바스크립트에서 시작한다.</p>
<pre><code>npm install metalsmith metalsmith-layouts metalsmith-permalinks metalsmith-markdown</code></pre><p>특별한 명령어 없이 노드에서 수행하면 된다.
<a href="https://github.com/segmentio/metalsmith/blob/master/examples/static-site/index.js">index.js</a> 이름도 임의로 정하면 된다.
Hexo 같은 생성기는 다운로드 받으면 바로 사용할 수 있는데 반해 Matalsmith는 이런 화면을 보려면 추가 작업이 더 필요하다.</p>
<pre><code>node index.js</code></pre><h2 id="-">마무리</h2>
<p>가입형 무료 워드프레스 기능과 비교하면 SSG는 기능이 부족하다.
대신 쉽게 수정하고 그 동작 방식을 들여다 볼 수 있는 장점이 있다.
대부분의 SSG가 그렇듯이 Metalsmith도 댓글 기능이 없다.
서버와 통신하는 기능이 없으니 당연하다.
<a href="https://disqus.com/">Disqus</a>를 사용하여 댓글 기능을 추가했다.
당신이 보고 있는 이 블로그가 그 결과다.</p>

      </div>
      <br>
      <div>
        <a href="https://github.com/afrontend" title="GitHub"><img style="width:20px;height:20px;" src="https://agvim.files.wordpress.com/2015/08/github-mark-32px.png" alt="github.com/afrontend"></a>&nbsp;<a href="https://github.com/afrontend" title="GitHub"></a>
        <a href="https://agvim.wordpress.com" title="또 다른 블로그, Afrontend Blog"><img style="width:20px;height:20px;" src="https://agvim.files.wordpress.com/2017/10/wordpress-logo-32-blue.png" alt="https://agvim.wordpress.com/"></a>&nbsp;<a href="https://agvim.wordpress.com/" title="또 다른 블로그, Afrontend Blog"></a>
        <!--<a href="http://feeds.feedburner.com/AfrontendWebData" title="피드 구독하기" rel="alternate"><img style="width:20px;height:20px;" src="https://feedburner.google.com/fb/images/pub/feed-icon32x32.png" alt="" /></a>&nbsp;<a href="http://feeds.feedburner.com/AfrontendWebData" title="피드 구독하기" rel="alternate"></a>-->
        <!--<a href="https://feedburner.google.com/fb/a/mailverify?uri=AfrontendWebData&loc=en_US" title="이메일로 글을 받아 볼 수 있어요" rel="alternate" style="text-decoration: none"><span style="font-size:25px;">@</span> </a>-->
      </div>
      <br>
      <div id="disqus_thread"></div>
      <script>

      /**
      *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
      *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
      /*
      var disqus_config = function () {
      this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
      this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
      };
      */
      (function() { // DON'T EDIT BELOW THIS LINE
      var d = document, s = d.createElement('script');
      s.src = 'https://afrontend-github-io.disqus.com/embed.js';
      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
      })();
      </script>
      <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
      <div class="footer">
      </div>
    </div>
    <script id="dsq-count-scr" src="//afrontend-github-io.disqus.com/count.js" async></script>
  </body>
</html>
]]></description><link>https://afrontend.github.io/posts/metalsmith</link><guid isPermaLink="true">https://afrontend.github.io/posts/metalsmith</guid><pubDate>Fri, 06 Oct 2017 00:00:00 GMT</pubDate></item></channel></rss>