<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[웹 읽고 쓰고]]></title><description><![CDATA[웹 데이터를 읽고 쓰고 보기 좋게 보여주는 연습]]></description><link>https://afrontend.github.io</link><generator>metalsmith-feed</generator><lastBuildDate>Mon, 02 Oct 2017 07:02:57 GMT</lastBuildDate><atom:link href="https://afrontend.github.io/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[블로그 히트 카운트 읽기]]></title><description><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <title>블로그 히트 카운트 읽기 - 웹 읽고 쓰고</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <!-- Google Fonts -->
    <!--<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">-->
    
    <!-- CSS Reset -->
    <!--<link rel="stylesheet" href="//cdn.rawgit.com/necolas/normalize.css/master/normalize.css">-->
    
    <!-- Milligram CSS minified -->
    <!--<link rel="stylesheet" href="//cdn.rawgit.com/milligram/milligram/master/dist/milligram.min.css">-->
    
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.7.0/styles/default.min.css">
    
    <!--<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/flexboxgrid/6.3.1/flexboxgrid.min.css" type="text/css" >-->
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/mini.css/2.3.4/mini-default.min.css">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    
    <!-- You should properly set the path from the main file. -->
    
    <link rel="stylesheet" href="../css/blog.css">
    
    
    <!-- Global Site Tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-81660498-2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments)};
      gtag('js', new Date());
    
      gtag('config', 'UA-81660498-2');
    </script>
    
    
  </head>
  </head>
  <body>
    <div class="header_bar" >
      <div class="header">
        <div class="clearfix">
          <div class="float-left" >
            <a href="/index.html">Home</a>
            <a href="/about">About</a>
            <!--<a href="#">RSS</a>-->
          </div>
        </div>
      </div>
    </div>
    <div class="post">
        <h1>블로그 히트 카운트 읽기</h1>
        <div class="container"> <div class="row"> &nbsp; </div> </div>
      <h3 id="-">웹 데이터 읽기</h3>
<p>브라우저로 볼 수 있는 데이터는 여러 툴로도 읽을 수 있다.
간단하게 웹 페이지 주소와 데이터를 지정할 수 있는 <a href="https://www.w3.org/TR/css3-selectors/" title="CSS3 선택자 표준 문서">CSS selector</a>만 있으면 웹 데이터를 읽을 수 있다.
주소는 이해하기 쉬운 반면 CSS Selector는 조금 불편할 수 있다.
최신 브라우저들은 웹 페이지의 특정 테스트를 선택하고 이 텍스트에 해당하는 CSS selector를 복사할 수 있는 기능을 내장하고 있다.
크롬 브라우저라면 우선 Ctrl-Shift-c 키를 누르고 마우스로 원하는 텍스트를 선택한다.
브라우저 하단 혹은 오른쪽에 생성된 Elements 탭에서 하이라이트된 소스에 마우스를 옮기고 Copy 메뉴의 Copy selector를 선택한다.
이제 원하는 곳에 클립보드를 붙여 넣기하면 된다.</p>
<h3 id="-">블로그 히트 카운트 읽기</h3>
<p>다른 <a href="https://agvim.wordpress.com/" title="JavaScript, Python, Vim, Ubuntu 개발 블로그">블로그</a>에도 글을 쓰고 있는데 카운트가 올라가면 즐겁기 때문에 아래 명령으로 읽고 있다.
내 글이 도움되었는지 알고 싶지만 방법을 모름으로 알 수 없고 단지, 댓글이 없는 것으로 보아 2000번의 방문은 스쳐 지나간 걸로 짐작하고 있다.
<a href="https://curl.haxx.se/" title="command line tool and library for transferring data with URLs">Curl</a>로 웹 페이지를 읽고 <a href="https://www.npmjs.com/package/hgrep" title="hgrep is a Unix CLI tool which lets you select elements with jQuery/CSS syntax and print either the HTML serialization of the selection, or a specified attribute of each element, or their text representation.">hgrep</a>으로 원하는  텍스트를 찾는다.</p>
<pre><code class="hljs"><span class="hljs-variable">$ </span>curl -s <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/agvim.wordpress.com/</span> | hgrep -t <span class="hljs-string">'#blog-stats-18 &gt; ul &gt; li'</span>
<span class="hljs-number">2</span>,<span class="hljs-number">023</span> hits</code></pre>

<p>비슷한 방법으로 <a href="https://agvim.wordpress.com/2017/07/05/reading-web-data-without-a-browser/" title="Curl과 hgrep으로 웹 데이터 읽는 방법">서울의 현재 기온을 터미널에서 읽을 수</a>도 있다.</p>
<pre><code class="hljs">$ curl -s https:<span class="hljs-regexp">//</span>www.accuweather.com<span class="hljs-regexp">/ko/</span>kr<span class="hljs-regexp">/seoul/</span><span class="hljs-number">226081</span><span class="hljs-regexp">/weather-forecast/</span><span class="hljs-number">226081</span> \
| hgrep -t <span class="hljs-string">"#current-city-tab &gt; a &gt; span.local-temp"</span>
<span class="hljs-number">28</span>°C</code></pre>

<h3 id="-">웹 데이터 텍스트에서 단어별 빈도수 읽기</h3>
<p>조금 더 많은 명령어를 사용하여 텍스트를 가공할 수도 있다.
<a href="http://metalsmith.io">Metalsmith</a>라는 정적 사이트 생성기(<strong>S</strong>tatic <strong>S</strong>ite <strong>G</strong>enerator)를 사용하여 이 글을 쓰고 있다.
여러 <strong>SSG</strong>들은 <a href="https://www.staticgen.com/" title="정적 사이트 생성기 모음 사이트">StaticGen</a>에서 찾을 수 있는데 각각 툴 대한 한 줄 설명을 포함하고 있다.
이 설명중에서 가장 많이 언급된 단어를 찾기로 했다.</p>
<pre><code class="hljs">$ curl -s https://www.staticgen.com/ \
| <span class="hljs-type">hgrep</span> -t <span class="hljs-string">"div.description"</span> \
| <span class="hljs-type">sed</span> -e 's/\s\+/\n/g' \
| <span class="hljs-type">sed</span> -e 's/\.//g' \
| <span class="hljs-type">sed</span> -e 's/,//g' \
| <span class="hljs-type">tr</span> [:upper:] [:lower:] \
| <span class="hljs-type">sort</span> \
| <span class="hljs-type">uniq</span> -c \
| <span class="hljs-type">sort</span> -r \
| <span class="hljs-type">head</span> <span class="hljs-number">-10</span>
  <span class="hljs-number">139</span> static
  <span class="hljs-number">112</span> generator
  <span class="hljs-number">108</span> a
   <span class="hljs-number">78</span> site
   <span class="hljs-number">62</span> and
   <span class="hljs-number">46</span> <span class="hljs-keyword">for</span>
   <span class="hljs-number">40</span> is
   <span class="hljs-number">39</span> <span class="hljs-built_in">in</span>
   <span class="hljs-number">34</span> <span class="hljs-built_in">simple</span>
   <span class="hljs-number">31</span> written</code></pre>

<p>Curl로 시작하는 명령어는 10줄이나 되지만 이해하기 어렵지 않다.
명령어들은 <a href="https://www.gnu.org/software/bash/">Bash</a>의 파이프를 통하여 데이터를 전달 받고, 처리하고, 다시 전달하는 과정을 반복한다.
명령어 결과로 가장 많이 언급된 10개의 단어를 찾을 수 있다.
프로그램 제목인 Static Site Generator를 제외하고 보니 <strong>simple</strong> 단어가 가장 많이 언급되었다.
성급하게 결론을 내리면 이들은 자신을 <strong>간단</strong>하다고 자랑한다는 것을 알 수 있다.
실제로 그렇다는 것이 아니니 과정만 즐기길 바란다.
각 명령어들은 한 가지 일만 처리함으로 이해하기 쉽다.
명령어 외에 <a href="https://agvim.wordpress.com/category/webdata/">다른 방법으로 웹 데이터를 읽는 방법</a>도 참조하길 바란다.</p>
<table>
<thead>
<tr>
<th>명령어</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>curl -s <a href="https://www.staticgen.com/">https://www.staticgen.com/</a></td>
<td>웹 페이지를 읽는다.</td>
</tr>
<tr>
<td>hgrep -t “div.description”</td>
<td>한 줄 설명을 지정한다.</td>
</tr>
<tr>
<td>sed -e ‘s/\s+/\n/g’</td>
<td>공백을 행 변경 문자로 바꾼다.</td>
</tr>
<tr>
<td>sed -e ‘s/.//g’</td>
<td>. (dot)를 지운다.</td>
</tr>
<tr>
<td>sed -e ‘s/,//g’</td>
<td>, (comma)를 지운다.</td>
</tr>
<tr>
<td>tr [:upper:] [:lower:]</td>
<td>모두 소문자로 바꾼다.</td>
</tr>
<tr>
<td>sort</td>
<td>정렬한다.</td>
</tr>
<tr>
<td>uniq -c</td>
<td>단어 앞에 반복된 총 회수를 추가한다.</td>
</tr>
<tr>
<td>sort -r</td>
<td>역순으로 정렬한다.</td>
</tr>
<tr>
<td>head -10</td>
<td>처음 10줄 만 보여 준다.</td>
</tr>
</tbody>
</table>
<h2 id="-">마무리</h2>
<p>웹 스크랩 혹은 웹 크롤링등의 고급적인 방법을 사용하지 않고 고급 프로그래밍 언어를 사용하지 않아도 작은 명령어들을 함께 사용하여 웹 데이터를 가공할 수 있다.
한번 만들어 놓으면 자주 사용할 수 있으며 시간순으로 저장하여 변화 과정을 추적할 수도 있다.
개인 툴 박스에 넣어두기에 딱이다.</p>

      <div class="footer">
        <div class="license">
          <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/"><img alt="크리에이티브 커먼즈 라이선스" style="border-width:0;" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" /></a><br />이 저작물은 <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">크리에이티브 커먼즈 저작자표시-동일조건변경허락 4.0 국제 라이선스</a>에 따라 이용할 수 있습니다.
        </div>
      
        <div id="disqus_thread"></div>
        <script>
      
        /**
        *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
        *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
        /*
        var disqus_config = function () {
        this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
        this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
        };
        */
        (function() { // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        s.src = 'https://afrontend-github-io.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
        })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
      
      </div>
    </div>
    <script id="dsq-count-scr" src="//afrontend-github-io.disqus.com/count.js" async></script>
  </body>
</html>
]]></description><link>https://afrontend.github.io/posts/blog-hit-count</link><guid isPermaLink="true">https://afrontend.github.io/posts/blog-hit-count</guid><pubDate>Tue, 26 Sep 2017 00:00:00 GMT</pubDate></item></channel></rss>