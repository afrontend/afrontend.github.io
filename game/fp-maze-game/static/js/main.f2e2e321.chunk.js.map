{"version":3,"sources":["App.js","fp-maze.js","serviceWorker.js","index.js"],"names":["fn","CONFIG","convert1DimAry","_","flattenDepth","convert2DimAry","fp","chunk","createItem","links","visited","willVisit","wall","up","right","down","left","createPathPanel","flow","panel","startItem","depth","mark","pos","row","col","color","getColor","addStartItem","len","range","map","isFunction","forEach","rows","rIndex","item","cIndex","getItem","getSomeLeafItem","shuffle","filter","head","markTree","curItem","leafItem","isEmpty","getLeafItem","testFn","adjacentPositions","fourWayPos","direction","rDirection","each","p","undefined","push","getAdjacentPosition","nextItem","ary","maxBy","markLastItem","initPathPanel","pathPanel","getWallClassName","props","className","join","Block","react_default","a","createElement","style","backgroundColor","children","Blocks","window","index","App_Block","key","updatePathPanel","state","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","setInterval","setState","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2e2e321.chunk.js","sourcesContent":["/*\nJavaScript Maze\nBy Bob Hwang\nhttps://github.com/afrontend/fp-maze-game\n*/\n\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport './App.css';\nimport {\n  initPathPanel,\n  markPathPanel,\n  joinPathPanel\n} from './fp-maze';\n\nconst getWallClassName = props => {\n  const className = ['block'];\n  if (props.wall) {\n    if (props.wall.up) className.push('up');\n    if (props.wall.right) className.push('right');\n    if (props.wall.down) className.push('down');\n    if (props.wall.left) className.push('left');\n  }\n  return className.join(' ');\n};\n\nconst Block = props => (\n  <div className={getWallClassName(props.item)} style={{backgroundColor: props.color}}>\n    {props.children}\n  </div>\n);\n\nconst createBlocks = ary => (\n  ary.map(\n    (item, index) => (\n      <Block item={item} color={item.color} key={index}>\n        {item.mark ? item.mark : ' '}\n      </Block>\n    )\n  )\n);\n\nconst Blocks = props => (createBlocks(props.window));\n\nconst speedUp = (fn) => (_.flow([fn, fn, fn, fn, fn, fn, fn, fn, fn]));\n\nconst updatePathPanel = speedUp(markPathPanel);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // this.state = markPathPanel(initPathPanel());\n    this.state = initPathPanel();\n    this.state.timer = setInterval(() => {\n      this.setState((state) => (updatePathPanel(state)));\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"App\">\n          <Blocks window={joinPathPanel(this.state)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/*\nJavaScript Maze\nBy Bob Hwang\nhttps://github.com/afrontend/fp-maze-game\n*/\n\nimport _ from 'lodash';\nimport fp from 'lodash/fp';\nimport './App.css';\n\n// configuration\n\nconst CONFIG = {\n  rows: 40,\n  columns: 40\n};\n\n// panel functions\n\nconst getAry = (len, fn) => (\n  _.range(len).map(() => (\n    fn\n    ? (\n      _.isFunction(fn)\n      ? fn()\n      : fn )\n    : null)\n  ));\n\nconst convert1DimAry = _.flattenDepth;\nconst convert2DimAry = fp.chunk(CONFIG.columns)\n\nconst createItem = () => ({\n  links: null,\n  visited: false,\n  willVisit: false,\n  wall: {\n    up: false,\n    right: false,\n    down: false,\n    left: false\n  }\n});\n\nconst addPos = (panel) => {\n  panel.forEach((rows, rIndex) => (\n    rows.forEach((item, cIndex) => {\n      item.pos = { row: rIndex, col: cIndex };\n      return item;\n    })\n  ));\n  return panel;\n}\n\nconst addStartItem = (panel) => {\n  const startItem = panel[0][20];\n  startItem.willVisit = true;\n  startItem.depth = 1;\n  startItem.mark = 'S';\n  startItem.pos = {\n    row: 0,\n    col: 20\n  };\n  startItem.color = getColor(startItem);\n  return panel;\n};\n\nconst createPanel = () => (addStartItem(addPos(convert2DimAry(getAry(CONFIG.columns * CONFIG.rows, createItem)))));\nconst createPathPanel = _.flow([createPanel]);\n\n// tree\n\nconst getItem = (panel, pos) => {\n  return panel[pos.row][pos.col];\n};\n\nconst getSomeLeafItem = _.flow([\n  convert1DimAry,\n  _.shuffle,\n  fp.filter((item) => (item.willVisit === true && item.links === null)),\n  _.shuffle,\n  _.head\n]);\n\nconst getLeafItem = (panel) => {\n  const leafItem = getSomeLeafItem(panel);\n  return _.isEmpty(leafItem) ? null : getItem(panel, leafItem.pos);\n};\n\nconst getColor = (item) => {\n  if (!item.visited && item.willVisit) return 'green';\n  if (item.visited && !item.willVisit) return 'blue';\n};\n\nconst getAdjacentPosition = (panel, pos, testFn ) => {\n  const adjacentPositions = [];\n  const fourWayPos = _.shuffle([\n    {row: pos.row - 1, col: pos.col, direction: 'up', rDirection: 'down'},\n    {row: pos.row, col: pos.col + 1, direction: 'right', rDirection: 'left'},\n    {row: pos.row + 1, col: pos.col, direction: 'down', rDirection: 'up'},\n    {row: pos.row, col: pos.col - 1, direction: 'left', rDirection: 'right'}\n  ]);\n  _.each(fourWayPos, (p) => {\n    const item = panel[p.row] && panel[p.row][p.col] ? panel[p.row][p.col] : undefined;\n    if (item && testFn(item)) {\n      adjacentPositions.push(p);\n    }\n  });\n  return _.shuffle(adjacentPositions);\n};\n\nconst markLastItem = (panel) => {\n  const ary = convert1DimAry(panel);\n  const lastItem = _.maxBy(ary, (item) => (item.depth));\n  lastItem.mark = 'E';\n  return panel;\n}\n\nconst markTree = (panel) => {\n  const curItem = getLeafItem(panel);\n  if (curItem) {\n    curItem.visited = true;\n    curItem.willVisit = false;\n    curItem.color = getColor(curItem);\n    curItem.links = getAdjacentPosition(panel, curItem.pos, (item) => (\n      item.visited !== true && item.willVisit !== true)\n    );\n    _.each(curItem.links, (pos) => {\n      curItem.wall[pos.direction] = true;\n      const nextItem = getItem(panel, pos);\n      nextItem.wall[pos.rDirection] = true;\n      nextItem.willVisit = true;\n      nextItem.color = getColor(nextItem);\n      nextItem.depth = curItem.depth + 1;\n    });\n  } else {\n    return markLastItem(panel);\n  }\n  return panel;\n}\n\nexport const initPathPanel = () => ({pathPanel: createPathPanel()});\nexport const markPathPanel = (state) => ({ pathPanel: markTree(state.pathPanel) });\nexport const joinPathPanel = (state) => (convert1DimAry(state.pathPanel));\n\nexport default {};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}