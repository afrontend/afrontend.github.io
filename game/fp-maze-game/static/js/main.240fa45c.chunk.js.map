{"version":3,"sources":["fp-maze.js","App.js","serviceWorker.js","index.js"],"names":["CONFIG","convert1DimAry","_","flattenDepth","convert2DimAry","fp","chunk","createItem","color","links","visited","willVisit","wall","up","right","down","left","createPathPanel","flow","panel","startItem","depth","pos","row","col","getColor","addStartItem","len","fn","range","map","isFunction","forEach","rows","rIndex","item","cIndex","getItem","fillTree","curItem","ary","shuffle","leafItems","head","filter","isEmpty","getLeafItem","testFn","adjacentPositions","fourWayPos","direction","rDirection","each","p","undefined","push","getAdjacentPosition","nextItem","console","log","maxBy","markLastItem","initPathPanel","pathPanel","markPathPanel","state","getWallClassName","props","className","join","Block","react_default","a","createElement","style","backgroundColor","children","Blocks","window","index","App_Block","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","setInterval","setState","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.240fa45c.chunk.js","sourcesContent":["/*\nJavaScript Maze\nBy Bob Hwang\nhttps://github.com/afrontend/fp-maze-game\n*/\n\nimport _ from 'lodash';\nimport fp from 'lodash/fp';\nimport './App.css';\n\n// configuration\n\nconst CONFIG = {\n  rows: 40,\n  columns: 40,\n  color: 'grey' ,\n  pathColor: 'blue'\n};\n\n// panel functions\n\nconst getAry = (len, fn) => (\n  _.range(len).map(() => (\n    fn\n    ? (\n      _.isFunction(fn)\n      ? fn()\n      : fn )\n    : null)\n  ));\n\nconst convert1DimAry = _.flattenDepth;\nconst convert2DimAry = fp.chunk(CONFIG.columns)\nconst createItem = () => ({\n  color: CONFIG.color,\n  links: null,\n  visited: false,\n  willVisit: false,\n  wall: {\n    up: false,\n    right: false,\n    down: false,\n    left: false\n  }\n});\nconst addPos = (panel) => {\n  panel.forEach((rows, rIndex) => (\n    rows.forEach((item, cIndex) => {\n      item.pos = { row: rIndex, col: cIndex };\n      return item;\n    })\n  ));\n  return panel;\n}\n\nconst addStartItem = (panel) => {\n  const startItem = panel[0][0];\n  startItem.willVisit = true;\n  startItem.depth = 1;\n  startItem.pos = {\n    row: 0,\n    col: 0\n  };\n  startItem.color = getColor(startItem);\n  return panel;\n};\nconst createPanel = () => (addStartItem(addPos(convert2DimAry(getAry(CONFIG.columns * CONFIG.rows, createItem)))));\n\nconst createPathPanel = _.flow([createPanel]);\n\n// path\n\nconst tee = (args) => {\n  console.log(\"tee\", args);\n  return args;\n}\n\nconst getItem = (panel, pos) => {\n  // return panel && pos.row && pos.col && panel[pos.row] && panel[pos.row][pos.col] ? panel[pos.row][pos.col] : null;\n  return panel[pos.row][pos.col];\n};\n\nconst getLeafItem = (panel) => {\n  const ary = _.shuffle(convert1DimAry(panel));\n  const leafItems = _.head(_.shuffle(_.filter(ary, (item) => (item.willVisit === true && item.links === null))));\n  if (_.isEmpty(leafItems)) {\n    return null;\n  }\n  return getItem(panel, leafItems.pos);\n};\n\nconst getColor = (item) => {\n  if (!item.visited && item.willVisit) return 'green';\n  if (item.visited && !item.willVisit) return 'blue';\n};\n\nconst getAdjacentPosition = (panel, pos, testFn ) => {\n  const adjacentPositions = [];\n  const fourWayPos = _.shuffle([\n    {row: pos.row - 1, col: pos.col, direction: 'up', rDirection: 'down'},\n    {row: pos.row, col: pos.col + 1, direction: 'right', rDirection: 'left'},\n    {row: pos.row + 1, col: pos.col, direction: 'down', rDirection: 'up'},\n    {row: pos.row, col: pos.col - 1, direction: 'left', rDirection: 'right'}\n  ]);\n  _.each(fourWayPos, (p) => {\n    const item = panel[p.row] && panel[p.row][p.col] ? panel[p.row][p.col] : undefined;\n    if (item && testFn(item)) {\n      adjacentPositions.push(p);\n    }\n  });\n  return adjacentPositions;\n};\n\nconst markLastItem = (panel) => {\n  const ary = convert1DimAry(panel);\n  const lastItem = _.maxBy(ary, (item) => (item.depth));\n  lastItem.color = 'red';\n  return panel;\n}\n\nconst fillTree = (panel) => {\n  const curItem = getLeafItem(panel);\n  if (curItem) {\n    curItem.visited = true;\n    curItem.willVisit = false;\n    curItem.color = getColor(curItem);\n    curItem.links = getAdjacentPosition(panel, curItem.pos, (item) => (\n      item.visited !== true && item.willVisit !== true)\n    );\n    _.each(curItem.links, (pos) => {\n      curItem.wall[pos.direction] = true;\n      const nextItem = getItem(panel, pos);\n      nextItem.wall[pos.rDirection] = true;\n      nextItem.willVisit = true;\n      nextItem.color = getColor(nextItem);\n      nextItem.depth = curItem.depth + 1;\n    });\n    console.log('item', curItem);\n  } else {\n    markLastItem(panel);\n  }\n  return panel;\n};\n\nconst markTree = (panel) => {\n  return fillTree(panel);\n}\n\nexport const initPathPanel = () => ({pathPanel: createPathPanel()});\nexport const markPathPanel = (state) => ({ pathPanel: markTree(state.pathPanel) });\nexport const joinPathPanel = (state) => (convert1DimAry(state.pathPanel));\n\nexport default {};\n","/*\nJavaScript Maze\nBy Bob Hwang\nhttps://github.com/afrontend/fp-maze-game\n*/\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport {\n  initPathPanel,\n  markPathPanel,\n  joinPathPanel\n} from './fp-maze';\n\nconst getWallClassName = props => {\n  const className = ['block'];\n  if (props.wall) {\n    if (props.wall.up) className.push('up');\n    if (props.wall.right) className.push('right');\n    if (props.wall.down) className.push('down');\n    if (props.wall.left) className.push('left');\n  }\n  return className.join(' ');\n};\n\nconst Block = props => (\n  <div className={getWallClassName(props.item)} style={{backgroundColor: props.color}}>\n    {props.children}\n  </div>\n);\n\nconst createBlocks = ary => (\n  ary.map(\n    (item, index) => (\n      <Block item={item} color={item.color} key={index}>\n        {' '}\n      </Block>\n    )\n  )\n);\n\nconst Blocks = props => (createBlocks(props.window));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initPathPanel();\n    this.state.timer = setInterval(() => {\n      this.setState((state) => (markPathPanel(state)));\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"App\">\n          <Blocks window={joinPathPanel(this.state)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}