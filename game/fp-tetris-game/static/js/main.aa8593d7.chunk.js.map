{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CONFIG","rows","columns","color","scrollDownInterval","count","getAry","len","fn","_","range","map","isFunction","createItem","getEmptyRow","createPanel","convert1DimAry","flattenDepth","convert2DimAry","fp","chunk","isBlank","item","isNotBlank","isNotBlankRow","some","isNotFullRow","isOverlap","bgPanel","toolPanel","R","bg","tool","assignPanel","downPanel","panel","newPanel","cloneDeep","pop","unshift","leftPanel","shift","push","rightPanel","rotatePanel","moreSize","arguments","length","undefined","zeroPoints","forEach","rIndex","cIndex","zeroPoint","Object","assign","row","column","area","startRow","startColumn","endRow","endColumn","reduce","keep","Math","min","max","fromAry","isUndefined","matrix","from2Ary","abs","toAry","reverse","index","rotateRegion","first","clone","paint","posAry","each","pos","panelList","getWindow","createRandomToolPanel","random","scrollDownPanel","overlap","last","newBgPanel","newToolPanel","removeFullRow","getColorCount","sum","keyFnList","key","rotatedToolPanel","console","log","processKey","find","isValidKey","addEmptyRow","apply","toConsumableArray","getEmptyRows","filter","Block","props","react_default","a","createElement","className","style","backgroundColor","children","Blocks","window","App_Block","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timer","setInterval","setState","keyboard","e","setTimeout","which","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa8593d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport _ from 'lodash';\nimport fp from 'lodash/fp';\nimport * as R from 'ramda';\nimport * as keyboard from 'keyboard-handler';\nimport './App.css';\n\n// configuration\n\nconst CONFIG = {\n  rows: 17,\n  columns: 12,\n  color: 'grey',\n  scrollDownInterval: 700,\n  count: 0\n};\n\n// panel functions\n\nconst getAry = (len, fn) => (\n  _.range(len).map(() => (\n    fn\n    ? (\n      _.isFunction(fn)\n      ? fn()\n      : fn )\n    : null)\n  ));\n\nconst createItem = () => ({ color: CONFIG.color });\nconst getEmptyRow = () => (getAry(CONFIG.columns, createItem));\nconst createPanel = () => (getAry(CONFIG.rows, getEmptyRow));\nconst getEmptyRows = (count) => (getAry(count, getEmptyRow));\nconst convert1DimAry = _.flattenDepth;\nconst convert2DimAry = fp.chunk(CONFIG.columns)\n\n// check a panel\n\nconst isBlank = (item) => (item.color === CONFIG.color);\nconst isNotBlank = (item) => (item.color !== CONFIG.color);\nconst isBottom = (panel) => (isNotBlankRow(_.last(panel)));\nconst isNotBlankRow = fp.some(isNotBlank);\nconst isNotFullRow = fp.some(isBlank);\n\nconst isOnTheLeftEdge = (panel) => {\n  return !!_.reduce(panel, (count, rows) => {\n    return (isNotBlank(_.first(rows)) ? count + 1 : count);\n  }, 0);\n};\n\nconst isOnTheRightEdge = (panel) => {\n  return !!_.reduce(panel, (count, rows) => {\n    return (isNotBlank(_.last(rows)) ? count + 1 : count);\n  }, 0);\n};\n\nconst isOverlap = (bgPanel, toolPanel) => {\n  return _.some(\n    R.zipWith((bg, tool) => {\n      return (isNotBlank(bg) && isNotBlank(tool)) ? true : false;\n    }, convert1DimAry(bgPanel), convert1DimAry(toolPanel))\n    , (item) => (item === true));\n};\n\nconst assignPanel = (bgPanel, toolPanel) => {\n  return convert2DimAry(\n    R.zipWith((bg, tool) => {\n      return isBlank(tool) ? bg : tool;\n    }, convert1DimAry(bgPanel), convert1DimAry(toolPanel))\n  );\n};\n\n// move panel\n\nconst downPanel = (panel) => {\n  const newPanel = _.cloneDeep(panel);\n  newPanel.pop();\n  newPanel.unshift(getEmptyRow());\n  return newPanel;\n};\n\nconst leftPanel = (panel) => {\n  return _.cloneDeep(panel).map((rows) => {\n    rows.shift();\n    rows.push(createItem());\n    return rows;\n  });\n};\n\nconst rightPanel = (panel) => {\n  return _.cloneDeep(panel).map((rows) => {\n    rows.pop();\n    rows.unshift(createItem());\n    return rows;\n  });\n};\n\nconst flipMatrix = matrix => (\n  matrix[0].map((column, index) => (\n    matrix.map(row => row[index])\n  ))\n);\n\nconst rotateRegion = (area, panel) => {\n  const newPanel = _.cloneDeep(panel);\n  const fromAry = [];\n  _.range(area.startRow, area.endRow + 1).forEach((row) => {\n    _.range(area.startColumn, area.endColumn + 1).forEach((column) => {\n      fromAry.push(_.isUndefined(newPanel[row]) || _.isUndefined(newPanel[row][column]) ? createItem() : newPanel[row][column]);\n    });\n  });\n  const from2Ary = _.chunk(fromAry, Math.abs(area.startRow - area.endRow) + 1);\n  const toAry = convert1DimAry(flipMatrix(from2Ary.reverse()));\n  _.range(area.startRow, area.endRow + 1).forEach((row) => {\n    _.range(area.startColumn, area.endColumn + 1).forEach((column) => {\n      const item = toAry.shift();\n      const nop = _.isUndefined(newPanel[row]) || _.isUndefined(newPanel[row][column]) ? '' : newPanel[row][column] = _.cloneDeep(item);\n    });\n  });\n  return newPanel;\n};\n\nconst rotatePanel = (panel, moreSize = 2) => {\n  const zeroPoints = [];\n  panel.forEach((rows, rIndex) => (\n    rows.forEach((item, cIndex) => (\n      item.zeroPoint === true\n      ? zeroPoints.push(Object.assign(item, { row: rIndex, column: cIndex }))\n      : item\n    ))\n  ));\n\n  const area = zeroPoints.length === 0\n    ? {\n      startRow: 0,\n      startColumn: 0,\n      endRow: 0,\n      endColumn: 0\n    }\n    : _.reduce(zeroPoints, (keep, zeroPoint) => {\n      return {\n        startRow: Math.min(keep.startRow, zeroPoint.row),\n        startColumn: Math.min(keep.startColumn, zeroPoint.column),\n        endRow: Math.max(keep.endRow, zeroPoint.row),\n        endColumn: Math.max(keep.endColumn, zeroPoint.column)\n      };\n    }, {\n      startRow: 100,\n      startColumn: 100,\n      endRow: -1,\n      endColumn: -1\n    });\n\n  const newArea = zeroPoints.length === 1 ? {\n    startRow: _.first(zeroPoints).row - moreSize,\n    startColumn: _.first(zeroPoints).column - moreSize,\n    endRow: _.first(zeroPoints).row + moreSize,\n    endColumn: _.first(zeroPoints).column + moreSize\n  } : _.clone(area);\n\n  return rotateRegion(newArea, panel);\n};\n\n// paint on panel\n\nconst paint = (panel, posAry, color) => {\n  _(posAry).each((pos) => {\n    panel[pos.row][pos.column].color = color;\n    panel[pos.row][pos.column].zeroPoint = pos.zeroPoint ? pos.zeroPoint : false;\n  });\n  return panel;\n};\n\nconst paintO = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 4, zeroPoint: true},\n    {row: 0, column: 5, zeroPoint: true},\n    {row: 1, column: 4, zeroPoint: true},\n    {row: 1, column: 5, zeroPoint: true}\n  ], 'yellow');\n};\n\nconst paintI = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 3},\n    {row: 0, column: 4, zeroPoint: true},\n    {row: 0, column: 5},\n    {row: 0, column: 6}\n  ], 'lime');\n};\n\nconst paintT = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 5},\n    {row: 1, column: 4},\n    {row: 1, column: 5, zeroPoint: true},\n    {row: 1, column: 6}\n  ], 'pink');\n};\n\nconst paintJ = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 6},\n    {row: 1, column: 4},\n    {row: 1, column: 5, zeroPoint: true},\n    {row: 1, column: 6}\n  ], 'orange');\n};\n\nconst paintL = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 4},\n    {row: 1, column: 4},\n    {row: 1, column: 5, zeroPoint: true},\n    {row: 1, column: 6}\n  ], 'blue');\n};\n\nconst paintS = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 4, zeroPoint: true},\n    {row: 0, column: 5},\n    {row: 1, column: 3},\n    {row: 1, column: 4}\n  ], 'green');\n};\n\nconst paintZ = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 3},\n    {row: 0, column: 4, zeroPoint: true},\n    {row: 1, column: 4},\n    {row: 1, column: 5}\n  ], 'red');\n};\n\nconst panelList = [\n  R.compose(paintO, createPanel),\n  R.compose(paintI, createPanel),\n  R.compose(paintT, createPanel),\n  R.compose(paintJ, createPanel),\n  R.compose(paintL, createPanel),\n  R.compose(paintS, createPanel),\n  R.compose(paintZ, createPanel),\n];\nconst getWindow = R.compose(convert1DimAry, assignPanel);\n\n// make tool panel\n\nconst createRandomToolPanel = (panelList, bgPanel) => {\n  const toolPanel = panelList[_.random(0, panelList.length -1)]();\n  const overlap = bgPanel ? isOverlap(bgPanel, toolPanel) : false;\n  return overlap ? createPanel() : toolPanel;\n};\n\n// process event\n\nconst scrollDownPanel = (bgPanel, toolPanel) => {\n  const overlap = isBottom(toolPanel) || isOverlap(bgPanel, downPanel(toolPanel));\n  const newBgPanel = overlap ? assignPanel(bgPanel, toolPanel) : bgPanel;\n  const newToolPanel = overlap ? createRandomToolPanel(panelList, newBgPanel) : downPanel(toolPanel);\n  return {\n    bgPanel: removeFullRow(newBgPanel),\n    toolPanel: newToolPanel\n  };\n};\n\nconst leftKey = (bgPanel, toolPanel) => {\n  const overlap = isOnTheLeftEdge(toolPanel) || isOverlap(bgPanel, leftPanel(toolPanel));\n  // console.log(\"overlap left,\", overlap);\n  return {\n    bgPanel,\n    toolPanel:  overlap ? toolPanel : leftPanel(toolPanel)\n  };\n};\n\nconst rightKey = (bgPanel, toolPanel) => {\n  const overlap = isOnTheRightEdge(toolPanel) || isOverlap(bgPanel, rightPanel(toolPanel));\n  // console.log(\"overlap right,\", overlap);\n  return {\n    bgPanel,\n    toolPanel: overlap ? toolPanel : rightPanel(toolPanel)\n  };\n};\n\nconst getColorCount = (panel) => (\n  _.reduce(convert1DimAry(panel), (sum, item) => {\n    return (sum + (isNotBlank(item) ? 1 : 0));\n  }, 0)\n);\n\nconst upKey = (bgPanel, toolPanel) => {\n  const rotatedToolPanel = rotatePanel(toolPanel);\n  const overlap = getColorCount(toolPanel) !== getColorCount(rotatedToolPanel) || isOverlap(bgPanel, rotatedToolPanel);\n  console.log(\"overlap rotate,\", overlap);\n  return {\n    bgPanel,\n    toolPanel: overlap ? toolPanel : rotatedToolPanel\n  };\n};\n\n// key definition\n\nconst keyFnList = [\n  { key: 37, fn: leftKey },\n  { key: 38, fn: upKey },\n  { key: 39, fn: rightKey },\n  { key: 40, fn: scrollDownPanel }\n];\n\nconst processKey = R.curry((key, bgPanel, toolPanel) => (\n  _.find(keyFnList, (item) => (\n    item.key === key\n  )).fn(bgPanel, toolPanel))\n);\nconst isValidKey = (key) => (_.some(keyFnList, (item) => (item.key === key)));\n\n// remove row on panel\n\nconst addEmptyRow = panel => {\n  const newPanel = _.cloneDeep(panel);\n  const count = CONFIG.rows - newPanel.length;\n  CONFIG.count += count;\n  newPanel.unshift(...getEmptyRows(count));\n  _.last(_.last(newPanel)).count = CONFIG.count;\n  return newPanel;\n};\n\nconst removeFullRow = panel => {\n  const newPanel = _.filter(_.cloneDeep(panel), (row) => (\n    isNotFullRow(row)\n  ));\n\n  return addEmptyRow(newPanel);\n};\n\n// components\n\nconst createBlocks = ary => (\n  ary.map(\n    (item, index) => (\n      <Block color={item.color} key={index}>\n        {item.count}\n      </Block>\n    )\n  )\n);\n\nconst Block = props => (\n  <div className=\"block\" style={{backgroundColor: props.color}}>{props.children}</div>\n);\nconst Blocks = props => (createBlocks(props.window));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgPanel: createPanel(),\n      toolPanel: createRandomToolPanel(panelList)\n    };\n\n    this.state.timer = setInterval(() => {\n      this.setState((state) => {\n        return scrollDownPanel(state.bgPanel, state.toolPanel);\n      });\n    }, CONFIG.scrollDownInterval);\n\n    keyboard.keyPressed(e => {\n      setTimeout(() => {\n        this.setState((state) => {\n          return isValidKey(e.which)\n            ? processKey(e.which)(state.bgPanel, state.toolPanel)\n            : {};\n        });\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"App\">\n          <Blocks window={getWindow(this.state.bgPanel, this.state.toolPanel)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}