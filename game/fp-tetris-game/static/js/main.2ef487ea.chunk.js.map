{"version":3,"sources":["fp-tetris.js","App.js","serviceWorker.js","index.js"],"names":["CONFIG","rows","columns","color","count","pause","getAry","len","fn","_","range","map","isFunction","createItem","getEmptyRow","createPanel","convert1DimAry","flattenDepth","convert2DimAry","fp","chunk","isBlank","item","isNotBlank","isNotBlankRow","some","isNotFullRow","isOverlapItem","bg","tool","isOverlap","bgPanel","toolPanel","zipWith","isEqual","zipPanelItem","assignPanel","_ref","downPanel","panel","newPanel","cloneDeep","pop","unshift","leftPanel","shift","push","rightPanel","rotatePanel","moreSize","arguments","length","undefined","zeroPoints","forEach","rIndex","cIndex","zeroPoint","Object","assign","row","column","area","startRow","startColumn","endRow","endColumn","reduce","keep","Math","min","max","fromAry","isUndefined","matrix","from2Ary","abs","toAry","reverse","index","rotateRegion","first","clone","addEmptyRow","apply","toConsumableArray","getEmptyRows","last","removeFullRow","filter","paint","posAry","each","pos","panelList","flow","getWindow","createRandomToolPanel","random","getColorCount","sum","withPauseKey","panels","scrollDownPanel","_ref6","overlap","newBgPanel","newToolPanel","keyFnList","key","_ref2","_ref3","_ref4","rotatedToolPanel","console","log","_ref5","initTetrisTable","downTetrisTable","_ref7","keyTetrisTable","state","isValidKey","find","Block","props","react_default","a","createElement","className","style","backgroundColor","children","Blocks","window","App_Block","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","setInterval","setState","keyboard","e","setTimeout","which","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ef487ea.chunk.js","sourcesContent":["/*\nJavaScript Tetris\nBy Bob Hwang\nhttps://github.com/afrontend/fp-tetris-game\n*/\n\nimport _ from 'lodash';\nimport fp from 'lodash/fp';\nimport './App.css';\n\n// configuration\n\nconst CONFIG = {\n  rows: 17,\n  columns: 12,\n  color: 'grey',\n  count: 0,\n  pause: false\n};\n\n// panel functions\n\nconst getAry = (len, fn) => (\n  _.range(len).map(() => (\n    fn\n    ? (\n      _.isFunction(fn)\n      ? fn()\n      : fn )\n    : null)\n  ));\n\nconst createItem = () => ({ color: CONFIG.color });\nconst getEmptyRow = () => (getAry(CONFIG.columns, createItem));\nconst createPanel = () => (getAry(CONFIG.rows, getEmptyRow));\nconst getEmptyRows = (count) => (getAry(count, getEmptyRow));\nconst convert1DimAry = _.flattenDepth;\nconst convert2DimAry = fp.chunk(CONFIG.columns)\n\n// pause panel\n\nconst isPaused = () => (CONFIG.pause === true);\n\n// check a panel\n\nconst isBlank = (item) => (item.color === CONFIG.color);\nconst isNotBlank = (item) => (item.color !== CONFIG.color);\nconst isBottom = (panel) => (isNotBlankRow(_.last(panel)));\nconst isNotBlankRow = fp.some(isNotBlank);\nconst isNotFullRow = fp.some(isBlank);\n\nconst isOnTheLeftEdge = (panel) => {\n  return !!_.reduce(panel, (count, rows) => {\n    return (isNotBlank(_.first(rows)) ? count + 1 : count);\n  }, 0);\n};\n\nconst isOnTheRightEdge = (panel) => {\n  return !!_.reduce(panel, (count, rows) => {\n    return (isNotBlank(_.last(rows)) ? count + 1 : count);\n  }, 0);\n};\n\nconst isOverlapItem = (bg, tool) => ((isNotBlank(bg) && isNotBlank(tool)) ? true : false);\nconst isOverlap = (bgPanel, toolPanel) => {\n  return _.some(\n    _.zipWith(\n      convert1DimAry(bgPanel),\n      convert1DimAry(toolPanel),\n      isOverlapItem),\n    fp.isEqual(true));\n};\n\nconst zipPanelItem = (bg, tool) => (isBlank(tool) ? bg : tool);\nconst assignPanel = ({ bgPanel, toolPanel }) => {\n  return convert2DimAry(\n    _.zipWith(\n      convert1DimAry(bgPanel),\n      convert1DimAry(toolPanel),\n      zipPanelItem)\n  );\n};\n\n// move panel\n\nconst downPanel = (panel) => {\n  const newPanel = _.cloneDeep(panel);\n  newPanel.pop();\n  newPanel.unshift(getEmptyRow());\n  return newPanel;\n};\n\nconst leftPanel = (panel) => {\n  return _.cloneDeep(panel).map((rows) => {\n    rows.shift();\n    rows.push(createItem());\n    return rows;\n  });\n};\n\nconst rightPanel = (panel) => {\n  return _.cloneDeep(panel).map((rows) => {\n    rows.pop();\n    rows.unshift(createItem());\n    return rows;\n  });\n};\n\nconst flipMatrix = matrix => (\n  matrix[0].map((column, index) => (\n    matrix.map(row => row[index])\n  ))\n);\n\nconst rotateRegion = (area, panel) => {\n  const newPanel = _.cloneDeep(panel);\n  const fromAry = [];\n  _.range(area.startRow, area.endRow + 1).forEach((row) => {\n    _.range(area.startColumn, area.endColumn + 1).forEach((column) => {\n      fromAry.push(_.isUndefined(newPanel[row]) || _.isUndefined(newPanel[row][column]) ? createItem() : newPanel[row][column]);\n    });\n  });\n  const from2Ary = _.chunk(fromAry, Math.abs(area.startRow - area.endRow) + 1);\n  const toAry = convert1DimAry(flipMatrix(from2Ary.reverse()));\n  _.range(area.startRow, area.endRow + 1).forEach((row) => {\n    _.range(area.startColumn, area.endColumn + 1).forEach((column) => {\n      const item = toAry.shift();\n      const nop = _.isUndefined(newPanel[row]) || _.isUndefined(newPanel[row][column]) ? '' : newPanel[row][column] = _.cloneDeep(item);\n    });\n  });\n  return newPanel;\n};\n\nconst rotatePanel = (panel, moreSize = 2) => {\n  const zeroPoints = [];\n  panel.forEach((rows, rIndex) => (\n    rows.forEach((item, cIndex) => (\n      item.zeroPoint === true\n      ? zeroPoints.push(Object.assign(item, { row: rIndex, column: cIndex }))\n      : item\n    ))\n  ));\n\n  const area = zeroPoints.length === 0\n    ? {\n      startRow: 0,\n      startColumn: 0,\n      endRow: 0,\n      endColumn: 0\n    }\n    : _.reduce(zeroPoints, (keep, zeroPoint) => {\n      return {\n        startRow: Math.min(keep.startRow, zeroPoint.row),\n        startColumn: Math.min(keep.startColumn, zeroPoint.column),\n        endRow: Math.max(keep.endRow, zeroPoint.row),\n        endColumn: Math.max(keep.endColumn, zeroPoint.column)\n      };\n    }, {\n      startRow: 100,\n      startColumn: 100,\n      endRow: -1,\n      endColumn: -1\n    });\n\n  const newArea = zeroPoints.length === 1 ? {\n    startRow: _.first(zeroPoints).row - moreSize,\n    startColumn: _.first(zeroPoints).column - moreSize,\n    endRow: _.first(zeroPoints).row + moreSize,\n    endColumn: _.first(zeroPoints).column + moreSize\n  } : _.clone(area);\n\n  return rotateRegion(newArea, panel);\n};\n\n// remove row on panel\n\nconst addEmptyRow = panel => {\n  const newPanel = _.cloneDeep(panel);\n  const count = CONFIG.rows - newPanel.length;\n  CONFIG.count += count;\n  newPanel.unshift(...getEmptyRows(count));\n  _.last(_.last(newPanel)).count = CONFIG.count;\n  return newPanel;\n};\n\nconst removeFullRow = panel => {\n  const newPanel = _.filter(_.cloneDeep(panel), (row) => (\n    isNotFullRow(row)\n  ));\n\n  return addEmptyRow(newPanel);\n};\n\n// paint on panel\n\nconst paint = (panel, posAry, color) => {\n  _(posAry).each((pos) => {\n    panel[pos.row][pos.column].color = color;\n    panel[pos.row][pos.column].zeroPoint = pos.zeroPoint ? pos.zeroPoint : false;\n  });\n  return panel;\n};\n\nconst paintO = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 4, zeroPoint: true},\n    {row: 0, column: 5, zeroPoint: true},\n    {row: 1, column: 4, zeroPoint: true},\n    {row: 1, column: 5, zeroPoint: true}\n  ], 'yellow');\n};\n\nconst paintI = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 3},\n    {row: 0, column: 4, zeroPoint: true},\n    {row: 0, column: 5},\n    {row: 0, column: 6}\n  ], 'lime');\n};\n\nconst paintT = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 5},\n    {row: 1, column: 4},\n    {row: 1, column: 5, zeroPoint: true},\n    {row: 1, column: 6}\n  ], 'pink');\n};\n\nconst paintJ = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 6},\n    {row: 1, column: 4},\n    {row: 1, column: 5, zeroPoint: true},\n    {row: 1, column: 6}\n  ], 'orange');\n};\n\nconst paintL = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 4},\n    {row: 1, column: 4},\n    {row: 1, column: 5, zeroPoint: true},\n    {row: 1, column: 6}\n  ], 'blue');\n};\n\nconst paintS = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 4, zeroPoint: true},\n    {row: 0, column: 5},\n    {row: 1, column: 3},\n    {row: 1, column: 4}\n  ], 'green');\n};\n\nconst paintZ = (panel) => {\n  return paint(panel, [\n    {row: 0, column: 3},\n    {row: 0, column: 4, zeroPoint: true},\n    {row: 1, column: 4},\n    {row: 1, column: 5}\n  ], 'red');\n};\n\nconst panelList = [\n  _.flow([createPanel, paintO]),\n  _.flow([createPanel, paintI]),\n  _.flow([createPanel, paintT]),\n  _.flow([createPanel, paintJ]),\n  _.flow([createPanel, paintL]),\n  _.flow([createPanel, paintS]),\n  _.flow([createPanel, paintZ])\n];\nconst getWindow = _.flow([assignPanel, convert1DimAry]);\n\n// make tool panel\n\nconst createRandomToolPanel = (bgPanel) => {\n  const toolPanel = panelList[_.random(0, panelList.length -1)]();\n  const overlap = bgPanel ? isOverlap(bgPanel, toolPanel) : false;\n  return overlap ? createPanel() : toolPanel;\n};\n\n// process event\n\nconst getColorCount = (panel) => (\n  _.reduce(convert1DimAry(panel), (sum, item) => {\n    return (sum + (isNotBlank(item) ? 1 : 0));\n  }, 0)\n);\n\nconst spaceKey = ({ bgPanel, toolPanel }) => {\n  CONFIG.pause = CONFIG.pause === true ? false : true;\n  return {\n    bgPanel,\n    toolPanel\n  };\n};\n\nconst leftKey = ({ bgPanel, toolPanel }) => {\n  const overlap = isOnTheLeftEdge(toolPanel) || isOverlap(bgPanel, leftPanel(toolPanel));\n  // console.log(\"overlap left,\", overlap);\n  return {\n    bgPanel,\n    toolPanel:  overlap ? toolPanel : leftPanel(toolPanel)\n  };\n};\n\nconst upKey = ({ bgPanel, toolPanel }) => {\n  const rotatedToolPanel = rotatePanel(toolPanel);\n  const overlap = getColorCount(toolPanel) !== getColorCount(rotatedToolPanel) || isOverlap(bgPanel, rotatedToolPanel);\n  console.log(\"overlap rotate,\", overlap);\n  return {\n    bgPanel,\n    toolPanel: overlap ? toolPanel : rotatedToolPanel\n  };\n};\n\nconst rightKey = ({ bgPanel, toolPanel }) => {\n  const overlap = isOnTheRightEdge(toolPanel) || isOverlap(bgPanel, rightPanel(toolPanel));\n  // console.log(\"overlap right,\", overlap);\n  return {\n    bgPanel,\n    toolPanel: overlap ? toolPanel : rightPanel(toolPanel)\n  };\n};\n\nconst downKey = ({ bgPanel, toolPanel }) => {\n  const overlap = isBottom(toolPanel) || isOverlap(bgPanel, downPanel(toolPanel));\n  const newBgPanel = overlap ? assignPanel({ bgPanel, toolPanel }) : bgPanel;\n  const newToolPanel = overlap ? createRandomToolPanel(newBgPanel) : downPanel(toolPanel);\n  return {\n    bgPanel: removeFullRow(newBgPanel),\n    toolPanel: newToolPanel\n  };\n};\n\n// key definition\n\nconst withPauseKey = fn => panels => (isPaused() ? panels : fn(panels));\nconst scrollDownPanel = withPauseKey(downKey);\n\nconst keyFnList = [\n  { key: 32, fn: spaceKey },\n  { key: 37, fn: withPauseKey(leftKey) },\n  { key: 38, fn: withPauseKey(upKey) },\n  { key: 39, fn: withPauseKey(rightKey) },\n  { key: 40, fn: scrollDownPanel }\n];\n\nconst isValidKey = (key) => (_.some(keyFnList, (item) => (item.key === key)));\n\nexport const initTetrisTable = () => ({\n  bgPanel: createPanel(),\n  toolPanel: createRandomToolPanel()\n});\n\nexport const downTetrisTable = ({ bgPanel, toolPanel }) => (\n  scrollDownPanel({\n    bgPanel,\n    toolPanel\n  })\n);\n\nexport const keyTetrisTable = (key, state) => (\n  isValidKey(key) ? _.find(keyFnList, (item) => (item.key === key)).fn({ bgPanel: state.bgPanel, toolPanel: state.toolPanel }) : {}\n);\n\nexport const joinTetrisTable = (state) => (getWindow({ bgPanel: state.bgPanel, toolPanel: state.toolPanel }))\n\nexport default {};\n","/*\nJavaScript Tetris\nBy Bob Hwang\nhttps://github.com/afrontend/fp-tetris-game\n*/\n\nimport React, { Component } from 'react';\nimport * as keyboard from 'keyboard-handler';\nimport './App.css';\nimport {\n  initTetrisTable,\n  downTetrisTable,\n  keyTetrisTable,\n  joinTetrisTable\n} from './fp-tetris';\n\nconst createBlocks = ary => (\n  ary.map(\n    (item, index) => (\n      <Block color={item.color} key={index}>\n        {item.count}\n      </Block>\n    )\n  )\n);\n\nconst Block = props => (<div className=\"block\" style={{backgroundColor: props.color}}>{props.children}</div>);\nconst Blocks = props => (createBlocks(props.window));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initTetrisTable();\n    this.state.timer = setInterval(() => {\n      this.setState((state) => (downTetrisTable(state)));\n    }, 700);\n\n    keyboard.keyPressed(e => {\n      setTimeout(() => {\n        this.setState((state) => (keyTetrisTable(e.which, state)));\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"App\">\n          <Blocks window={joinTetrisTable(this.state)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}