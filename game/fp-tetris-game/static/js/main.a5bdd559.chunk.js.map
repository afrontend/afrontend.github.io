{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["args","qs","prop","arg","a","undefined","window","location","search","split","hasOwnProperty","console","log","e","JSON","stringify","getArgs","Block","props","react_default","createElement","className","style","backgroundColor","color","children","Blocks","map","item","index","App_Block","key","count","keyList","keyValue","keySymbol","getKeySymbol","found","_","find","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fpTetris","init","timer","setInterval","setState","tick","keyboard","setTimeout","symbol","which","debug","columns","flatten","bgPanel","toolPanel","join","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5bdd559.chunk.js","sourcesContent":["/*\nJavaScript Tetris\nBy Bob Hwang\nhttps://github.com/afrontend/fp-tetris-game\n*/\nimport * as keyboard from 'keyboard-handler';\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport './App.css';\nimport fpTetris from 'fp-tetris';\n\nconst SPACE = 32;\nconst LEFT = 37;\nconst UP = 38;\nconst RIGHT = 39;\nconst DOWN = 40;\n\nconst createBlocks = ary => (\n  ary.map(\n    (item, index) => (\n      <Block color={item.color} key={index}>\n        {item.count}\n      </Block>\n    )\n  )\n);\n\nfunction getArgs(qs) {\n  var args = {};\n  var a = '';\n  var prop;\n  var val;\n  var arg;\n\n  try {\n    if (qs === undefined) {\n      a = window.location.search.split('?')[1].split('&');\n    } else {\n      a = qs.split('?')[1].split('#')[0].split('&');\n    }\n\n    for (prop in a) {\n      if (a.hasOwnProperty(prop)) {\n        console.log(\"prop: \" + prop + \" value: \" + a[prop]);\n        val = a[prop];\n        arg = val.split('=');\n        args[arg[0]] = arg[1];\n      }\n    }\n  } catch (e) {\n    console.log('Error getArgs window.location.search('+window.location.search+')');\n  }\n  console.log(JSON.stringify(args));\n  return args;\n}\n\nconst args = getArgs();\n\nconst Block = props => (<div className=\"block\" style={{backgroundColor: props.color}}>{props.children}</div>);\nconst Blocks = props => (createBlocks(props.window));\n\nconst keyList = [\n  { keyValue: SPACE, keySymbol: 'space'},\n  { keyValue: LEFT, keySymbol: 'left' },\n  { keyValue: UP, keySymbol: 'up' },\n  { keyValue: RIGHT, keySymbol: 'right' },\n  { keyValue: DOWN, keySymbol: 'down' }\n];\n\nconst getKeySymbol = (keyValue) => {\n  const found = _.find(keyList, key => (key.keyValue === keyValue));\n  return found ? found.keySymbol : null;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = fpTetris.init();\n    this.state.timer = setInterval(() => {\n      this.setState(state => fpTetris.tick(state));\n    }, 700);\n\n    keyboard.keyPressed(e => {\n      setTimeout(() => {\n        this.setState(state => {\n          const symbol = getKeySymbol(e.which);\n          return symbol ? fpTetris.key(symbol, state) : state;\n        });\n      });\n    });\n  }\n\n  render() {\n    return args.debug\n      ? (\n        <div style={{columns: '400px 3'}}>\n          <div className=\"container\">\n            <div className=\"App\">\n              <Blocks window={_.flatten(this.state.bgPanel)} />\n            </div>\n          </div>\n          <div className=\"container\">\n            <div className=\"App\">\n              <Blocks window={_.flatten(this.state.toolPanel)} />\n            </div>\n          </div>\n          <div className=\"container\">\n            <div className=\"App\">\n              <Blocks window={_.flatten(fpTetris.join(this.state))} />\n            </div>\n          </div>\n        </div>\n      )\n      : (\n        <div className=\"container\">\n          <div className=\"App\">\n            <Blocks window={_.flatten(fpTetris.join(this.state))} />\n          </div>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}