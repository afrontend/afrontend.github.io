{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","name","count","menuList","setMenuList","increment","menuName","map","m","decrement","filter","Menu","menu","index","inc","useCallback","dec","key","className","onClick","newMenuName","setNewMenuName","href","onChange","e","target","value","type","push","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPA6FeA,MA1Ff,WAAgB,IAAD,EACqBC,mBAAS,CACzC,CAAEC,KAAM,kCAAgBC,MAAO,GAC/B,CAAED,KAAM,oDAAaC,MAAO,GAC5B,CAAED,KAAM,sBAAkBC,MAAO,GACjC,CAAED,KAAM,wCAAeC,MAAO,KALnB,mBACLC,EADK,KACKC,EADL,KAQPC,EAAY,SAAAC,GAChBF,EAAYD,EAASI,KAAI,SAAAC,GAIvB,OAHIA,EAAEP,OAASK,IACbE,EAAEN,MAAQM,EAAEN,MAAQ,GAEfM,OAILC,EAAY,SAAAH,GAChBF,EAAYD,EAASI,KAAI,SAAAC,GAIvB,OAHIA,EAAEP,OAASK,IACbE,EAAEN,MAAQM,EAAEN,MAAQ,GAEfM,KACNE,QAAO,SAAAF,GACR,OAAoB,IAAbA,EAAEN,WAIb,SAASS,EAAT,GAAyB,IAATC,EAAQ,EAARA,KACRJ,EAAII,EAAKA,KACTC,EAAQD,EAAKC,MAEbP,EAAWE,EAAEP,KACba,EAAMC,uBACV,WACEV,EAAUC,KAEZ,CAACA,IAGGU,EAAMD,uBACV,WACEN,EAAUH,KAEZ,CAACA,IAGH,OACE,yBAAKW,IAAMJ,EAAQK,UAAU,eAC3B,yBAAKA,UAAU,iCAAiCC,QAAUL,GAAM,0BAAMI,UAAU,cAAeV,EAAEP,OADnG,OAEE,yBAAKiB,UAAU,2BAA0B,0BAAMA,UAAU,cAAeV,EAAEN,QAF5E,OAGE,yBAAKgB,UAAU,wBAAwBC,QAAUH,GAAM,0BAAME,UAAU,cAAhB,OAnDhD,MAwD2BlB,mBAAS,IAxDpC,mBAwDLoB,EAxDK,KAwDQC,EAxDR,KAkEb,OACE,yBAAKH,UAAU,OACb,yBAAKA,UAAU,SACb,uBAAGA,UAAU,cACX,uBAAGI,KAAK,IAAIJ,UAAU,aAAtB,iBAEF,yBAAKA,UAAU,eACb,2BAAOK,SAAU,SAAAC,GAAC,OAAIH,EAAeG,EAAEC,OAAOC,QAAQA,MAAON,EAAaF,UAAU,QAAQS,KAAK,SADnG,QAEE,yBAAKT,UAAU,wBAAwBC,QAAS,kBAAME,EAAe,MAAM,0BAAMH,UAAU,cAAhB,MAF7E,QAGE,yBAAKA,UAAU,iCAAiCC,QAjBxD,WACMC,IACFjB,EAASyB,KAAK,CAAE3B,KAAMmB,EAAalB,MAAO,IAC1CE,EAAYD,GACZkB,EAAe,OAayD,0BAAMH,UAAU,cAAhB,wBAGpEf,GAAYA,EAASO,QAAO,SAAAF,GAC1B,OAAOY,GAAcZ,EAAEP,KAAK4B,SAAST,MACpCb,KAAI,SAACC,EAAGK,GACT,IAAMD,EAAO,CAAEA,KAAMJ,EAAGK,SACxB,OAAO,kBAACF,EAAD,CAAMM,IAAKJ,EAAOD,KAAMA,UCzEvBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f36d6188.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [ menuList, setMenuList ] = useState([\n    { name: '아이스 라떼'      , count: 0 },\n    { name: '아이스 아메리카노', count: 0 },\n    { name: '핫 라떼'          , count: 0 },\n    { name: '핫 아메리카노'    , count: 0 }\n  ]);\n\n  const increment = menuName => {\n    setMenuList(menuList.map(m => {\n      if (m.name === menuName) {\n        m.count = m.count + 1;\n      }\n      return m;\n    }));\n  };\n\n  const decrement = menuName => {\n    setMenuList(menuList.map(m => {\n      if (m.name === menuName) {\n        m.count = m.count - 1;\n      }\n      return m;\n    }).filter(m => {\n      return m.count !== -1;\n    }));\n  };\n\n  function Menu({ menu }) {\n    const m = menu.menu;\n    const index = menu.index;\n\n    const menuName = m.name;\n    const inc = useCallback(\n      () => {\n        increment(menuName)\n      },\n      [menuName]\n    );\n\n    const dec = useCallback(\n      () => {\n        decrement(menuName)\n      },\n      [menuName]\n    );\n\n    return (\n      <div key={ index } className=\"panel-block\">\n        <div className=\"button is-success is-fullwidth\" onClick={ inc }><span className=\"title is-6\">{ m.name }</span></div>&nbsp;\n        <div className=\"button is-outlined is-1\"><span className=\"title is-6\">{ m.count }</span></div>&nbsp;\n        <div className=\"button is-danger is-1\" onClick={ dec }><span className=\"title is-6\">X</span></div>\n      </div>\n    );\n  }\n\n  const [ newMenuName, setNewMenuName ] = useState('');\n\n  function addMenu() {\n    if (newMenuName) {\n      menuList.push({ name: newMenuName, count: 0 });\n      setMenuList(menuList);\n      setNewMenuName('');\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <nav className=\"panel\">\n        <p className=\"panel-tabs\">\n          <a href=\"/\" className=\"is-active\">커피</a>\n        </p>\n        <div className=\"panel-block\">\n          <input onChange={e => setNewMenuName(e.target.value)} value={newMenuName} className=\"input\" type=\"text\" /> &nbsp;\n          <div className=\"button is-danger is-1\" onClick={() => setNewMenuName('') }><span className=\"title is-6\">X</span></div> &nbsp;\n          <div className=\"button is-primary is-fullwidth\" onClick={ addMenu }><span className=\"title is-6\">이거요</span></div>\n        </div>\n        {\n          menuList && menuList.filter(m => {\n            return newMenuName ? m.name.includes(newMenuName) : true;\n          }).map((m, index) => {\n            const menu = { menu: m, index };\n            return <Menu key={index} menu={menu} />;\n          })\n        }\n      </nav>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}