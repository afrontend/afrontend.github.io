{"version":3,"sources":["fp-snake.js","App.js","serviceWorker.js","index.js"],"names":["CONFIG","rows","columns","color","tickTime","appleColor","snakeColor","getAry","len","fn","_","range","map","isFunction","convert1DimAry","flattenDepth","convert2DimAry","fp","chunk","matchKey","akey","bkey","isBlank","item","isNotBlank","isOverlapItem","apple","snake","createItem","getEmptyRow","createPanel","getNewRowColumn","headItem","key","row","column","paint","panel","posAry","newPanel","cloneDeep","forEach","pos","index","assign","createApplePanel","flow","random","length","createSnakePanel","addHeadItem","ary","head","concat","Object","toConsumableArray","removeTailItem","initial","reIndexing","justPaintSnake","moveSnake","filter","sortBy","moveSnakeAndAddTail","getSnake","updatePanel","_ref2","applePanel","snakePanel","tempSnakePanel","nextItemIsOutOfRange","getHeadItem","overlap","some","zipWith","isEqual","isOverlap","_ref","last","count","addCount","zipPanelItem","getWindow","_ref3","getNextItem","_getNewRowColumn","undefined","nextItemIsBlank","isUndefined","arrowKey","_ref4","origKey","keyFnList","nop","isValidKey","processKey","_ref5","_ref6","find","Block","props","react_default","a","createElement","className","style","backgroundColor","children","Blocks","window","App_Block","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timer","setInterval","setState","keyboard","e","setTimeout","which","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac4f4e7f.chunk.js","sourcesContent":["import _ from 'lodash';\nimport fp from 'lodash/fp';\n\n// configuration\n\nexport const CONFIG = {\n  rows: 15,\n  columns: 15,\n  color: 'grey',\n  tickTime: 250,\n  appleColor: 'red',\n  snakeColor: 'orange'\n};\n\n// util\n\nconst getAry = (len, fn) => (\n  _.range(len).map(() => (\n    fn\n    ? (\n      _.isFunction(fn)\n      ? fn()\n      : fn )\n    : null)\n  ));\n\nconst convert1DimAry = _.flattenDepth;\nconst convert2DimAry = fp.chunk(CONFIG.columns);\nconst matchKey = (akey, bkey) => (akey === bkey ? 1 : 0);\nconst isBlank = item => {\n  return item && item.color === CONFIG.color ? true : false;\n};\nconst isNotBlank = item => (item.color !== CONFIG.color);\nconst isOverlapItem = (apple, snake) => ((isNotBlank(apple) && isNotBlank(snake)) ? true : false);\nconst isOverlap = (applePanel, snakePanel) => {\n  return _.some(\n    _.zipWith(\n      convert1DimAry(applePanel),\n      convert1DimAry(snakePanel),\n      isOverlapItem),\n    fp.isEqual(true));\n};\n\n// key definition\n\nconst LEFT = 37;\nconst UP = 38;\nconst RIGHT = 39;\nconst DOWN = 40;\n\n// create panel\n\nconst createItem = () => ({ color: CONFIG.color });\nconst getEmptyRow = () => (getAry(CONFIG.columns, createItem));\nconst createPanel = () => (getAry(CONFIG.rows, getEmptyRow));\n\nconst getNewRowColumn = (headItem, key) => ({\n  row: headItem.row - matchKey(key, UP) + matchKey(key, DOWN),\n  column: headItem.column - matchKey(key, LEFT) + matchKey(key, RIGHT)\n});\n\n// paint\n\nconst paint = (panel, posAry, color) => {\n  const newPanel = _.cloneDeep(panel);\n  posAry.forEach((pos, index) => {\n    const item = _.assign(_.cloneDeep(pos), {\n      index,\n      color\n    });\n    newPanel[pos.row][pos.column] = item;\n  });\n  return newPanel;\n};\n\nconst paintApple = panel => {\n  return paint(panel, [{\n      row: _.random(0, panel.length - 1),\n      column: _.random(0, panel[0].length - 1)\n    }], CONFIG.appleColor);\n};\n\nconst paintSnake = panel => {\n  return paint(panel, [{\n      row: _.random(0, panel.length - 1),\n      column: _.random(0, panel[0].length - 1),\n      key: 0\n    }], CONFIG.snakeColor);\n};\n\nexport const createApplePanel = _.flow([createPanel, paintApple]);\nexport const createSnakePanel = _.flow([createPanel, paintSnake]);\n\n// for snake\n\nconst addHeadItem = ary => {\n  const snake = _.cloneDeep(ary);\n  const headItem = _.cloneDeep(_.head(snake));\n  const newHeadItem = _.assign(headItem, getNewRowColumn(headItem, headItem.key));\n  return [newHeadItem, ...snake];\n};\n\nconst removeTailItem = _.initial;\n\nconst reIndexing = ary => {\n  return ary.map((item, index) => {\n    item.index = index;\n    return item;\n  });\n};\n\nconst justPaintSnake = posAry => (paint(createPanel(), posAry, CONFIG.snakeColor));\n\nconst moveSnake = _.flow([\n  convert1DimAry,\n  fp.filter(isNotBlank),\n  fp.sortBy('index'),\n  addHeadItem,\n  reIndexing,\n  removeTailItem,\n  justPaintSnake\n]);\n\nconst moveSnakeAndAddTail = _.flow([\n  convert1DimAry,\n  fp.filter(isNotBlank),\n  fp.sortBy('index'),\n  addHeadItem,\n  reIndexing,\n  justPaintSnake\n]);\n\nconst getSnake = _.flow([\n  convert1DimAry,\n  fp.filter(isNotBlank),\n]);\n\nconst addCount = ({ applePanel, snakePanel }) => {\n  _.last(_.last(applePanel)).count = getSnake(snakePanel).length;\n  return {\n    applePanel,\n    snakePanel\n  };\n}\n\nexport const updatePanel = ({ applePanel, snakePanel }) => {\n  const outOfRange = nextItemIsOutOfRange(snakePanel, getHeadItem(snakePanel).key)\n  const tempSnakePanel = outOfRange ? snakePanel : moveSnake(snakePanel);\n  const overlap = isOverlap(applePanel, tempSnakePanel);\n  const newApplePanel = overlap ? createApplePanel() : applePanel;\n  const newSnakePanel = overlap ? moveSnakeAndAddTail(snakePanel) : tempSnakePanel;\n  return addCount({\n    applePanel: newApplePanel,\n    snakePanel: newSnakePanel\n  });\n};\n\nconst zipPanelItem = (apple, snake) => (isBlank(snake) ? apple : snake);\nconst assignPanel = ({ applePanel, snakePanel }) => {\n  return convert2DimAry(\n    _.zipWith(\n      convert1DimAry(applePanel),\n      convert1DimAry(snakePanel),\n      zipPanelItem)\n  );\n};\n\nexport const getWindow = _.flow([assignPanel, convert1DimAry]);\n\n// check functions\n\nconst getHeadItem = _.flow([\n  _.cloneDeep,\n  convert1DimAry,\n  fp.filter(isNotBlank),\n  fp.sortBy('index'),\n  _.head\n]);\n\nconst getNextItem = (snakePanel, key) => {\n  const headItem = getHeadItem(snakePanel);\n  const { row, column } = getNewRowColumn(headItem, key);\n  return snakePanel && snakePanel[row] && snakePanel[row][column] ? snakePanel[row][column] : undefined;\n};\nconst nextItemIsBlank = _.flow([getNextItem, isBlank]);\nconst nextItemIsOutOfRange = _.flow([getNextItem, _.isUndefined]);\n\nconst arrowKey = ({ applePanel, snakePanel, key }) => {\n  const headItem = getHeadItem(snakePanel);\n  const origKey = snakePanel[headItem.row][headItem.column].key;\n  snakePanel[headItem.row][headItem.column].key = nextItemIsBlank(snakePanel, key) ? key : origKey;\n  return {\n    applePanel,\n    snakePanel\n  };\n};\n\n// key definition\n\nconst nop = (nop) => (nop);\n\nconst keyFnList = [\n  { key: LEFT , fn: arrowKey },\n  { key: UP   , fn: arrowKey },\n  { key: RIGHT, fn: arrowKey },\n  { key: DOWN , fn: arrowKey },\n  { key: 0    , fn: nop }\n];\n\nconst isValidKey = key => (_.some(keyFnList, (item) => (item.key === key)));\nconst validKey = ({ applePanel, snakePanel, key }) => (\n  {\n    applePanel,\n    snakePanel,\n    key: isValidKey(key) ? key : 0\n  }\n);\n\nconst storeKey = ({ applePanel, snakePanel, key }) => (\n  _.find(keyFnList, (item) => (\n    item.key === key\n  )).fn({ applePanel, snakePanel, key })\n);\n\nexport const processKey = _.flow([validKey, storeKey]);\n\nexport default {};\n","/*\nJavaScript Snake\nBy Bob Hwang\nhttps://github.com/afrontend/fp-snake-game\n*/\n\nimport React, { Component } from 'react';\nimport * as keyboard from 'keyboard-handler';\nimport { CONFIG, createApplePanel, createSnakePanel, updatePanel, processKey, getWindow } from './fp-snake';\nimport './App.css';\n\n// components\n\nconst createBlocks = ary => (\n  ary.map(\n    (item, index) => (\n      <Block color={item.color} row={item.row} column={item.column} key={index}>\n        {item.count}\n      </Block>\n    )\n  )\n);\n\nconst Block = props => (\n  <div className=\"block\" style={{backgroundColor: props.color}}>{props.children}</div>\n);\nconst Blocks = props => (createBlocks(props.window));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      applePanel: createApplePanel(),\n      snakePanel: createSnakePanel()\n    };\n\n    this.state.timer = setInterval(() => {\n      this.setState((state) => {\n        return updatePanel({\n          applePanel: state.applePanel,\n          snakePanel: state.snakePanel\n        });\n      });\n    }, CONFIG.tickTime);\n\n    keyboard.keyPressed(e => {\n      setTimeout(() => {\n        this.setState((state) => {\n          return processKey({\n            applePanel: state.applePanel,\n            snakePanel: state.snakePanel,\n            key: e.which\n          });\n        });\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"App\">\n          <Blocks window={getWindow( {\n            applePanel: this.state.applePanel,\n            snakePanel: this.state.snakePanel\n          })} />\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}