{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CONFIG","rows","columns","color","tickTime","appleColor","snakeColor","paint","panel","posAry","newPanel","_","cloneDeep","forEach","pos","index","item","assign","row","column","getAry","len","fn","range","map","isFunction","convert1DimAry","flattenDepth","convert2DimAry","fp","chunk","matchKey","akey","bkey","isBlank","isNotBlank","isOverlapItem","bg","tool","createItem","getEmptyRow","createPanel","getNewRowColumn","headItem","key","addHeadItem","ary","snake","head","concat","Object","toConsumableArray","removeTailItem","initial","reIndexing","justPaintSnake","moveSnake","flow","filter","sortBy","moveSnakeAndAddTail","updatePanel","_ref","applePanel","snakePanel","tempSnakePanel","nextItemIsOutOfRange","getHeadItem","overlap","some","zipWith","isEqual","isOverlap","createApplePanel","zipPanelItem","getWindow","_ref2","getNextItem","_getNewRowColumn","undefined","nextItemIsBlank","isUndefined","arrowKey","_ref3","origKey","keyFnList","nop","isValidKey","processKey","_ref4","_ref5","find","Block","props","react_default","a","createElement","className","style","backgroundColor","Blocks","window","App_Block","random","createSnakePanel","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timer","setInterval","setState","keyboard","e","setTimeout","which","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39e7a503.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport _ from 'lodash';\nimport fp from 'lodash/fp';\nimport * as keyboard from 'keyboard-handler';\nimport './App.css';\n\n// configuration\n\nconst CONFIG = {\n  rows: 15,\n  columns: 15,\n  color: 'grey',\n  tickTime: 300,\n  appleColor: 'red',\n  snakeColor: 'orange'\n};\n\n// key definition\n\nconst LEFT = 37;\nconst UP = 38;\nconst RIGHT = 39;\nconst DOWN = 40;\n\n// paint\n\nconst paint = (panel, posAry, color) => {\n  const newPanel = _.cloneDeep(panel);\n  posAry.forEach((pos, index) => {\n    const item = _.assign(_.cloneDeep(pos), {\n      index,\n      color\n    });\n    newPanel[pos.row][pos.column] = item;\n  });\n  return newPanel;\n};\n\nconst paintApple = panel => {\n  return paint(panel, [{\n      row: _.random(0, CONFIG.rows - 1),\n      column: _.random(0, CONFIG.columns - 1)\n    }], CONFIG.appleColor);\n};\n\nconst paintSnake = panel => {\n  return paint(panel, [{\n      row: _.random(0, CONFIG.rows - 1),\n      column: _.random(0, CONFIG.columns - 1),\n      key: 0\n    }], CONFIG.snakeColor);\n};\n\n// util\n\nconst getAry = (len, fn) => (\n  _.range(len).map(() => (\n    fn\n    ? (\n      _.isFunction(fn)\n      ? fn()\n      : fn )\n    : null)\n  ));\n\nconst convert1DimAry = _.flattenDepth;\nconst convert2DimAry = fp.chunk(CONFIG.columns);\nconst matchKey = (akey, bkey) => (akey === bkey ? 1 : 0);\nconst isBlank = item => {\n  return item && item.color === CONFIG.color ? true : false;\n};\nconst isNotBlank = item => (item.color !== CONFIG.color);\nconst isOverlapItem = (bg, tool) => ((isNotBlank(bg) && isNotBlank(tool)) ? true : false);\nconst isOverlap = (applePanel, snakePanel) => {\n  return _.some(\n    _.zipWith(\n      convert1DimAry(applePanel),\n      convert1DimAry(snakePanel),\n      isOverlapItem),\n    fp.isEqual(true));\n};\n\n// create panel\n\nconst createItem = () => ({ color: CONFIG.color });\nconst getEmptyRow = () => (getAry(CONFIG.columns, createItem));\nconst createPanel = () => (getAry(CONFIG.rows, getEmptyRow));\n\nconst getNewRowColumn = (headItem, key) => ({\n  row: headItem.row - matchKey(key, UP) + matchKey(key, DOWN),\n  column: headItem.column - matchKey(key, LEFT) + matchKey(key, RIGHT)\n});\n\n// for snake\n\nconst addHeadItem = ary => {\n  const snake = _.cloneDeep(ary);\n  const headItem = _.cloneDeep(_.head(snake));\n  const newHeadItem = _.assign(headItem, getNewRowColumn(headItem, headItem.key));\n  return [newHeadItem, ...snake];\n};\n\nconst removeTailItem = _.initial;\n\nconst reIndexing = ary => {\n  return ary.map((item, index) => {\n    item.index = index;\n    return item;\n  });\n};\n\nconst justPaintSnake = posAry => (paint(createPanel(), posAry, CONFIG.snakeColor));\n\nconst moveSnake = _.flow([\n  convert1DimAry,\n  fp.filter(isNotBlank),\n  fp.sortBy('index'),\n  addHeadItem,\n  reIndexing,\n  removeTailItem,\n  justPaintSnake\n]);\n\nconst moveSnakeAndAddTail = _.flow([\n  convert1DimAry,\n  fp.filter(isNotBlank),\n  fp.sortBy('index'),\n  addHeadItem,\n  reIndexing,\n  justPaintSnake\n]);\n\nconst updatePanel = ({ applePanel, snakePanel }) => {\n  const tempSnakePanel = nextItemIsOutOfRange(snakePanel, getHeadItem(snakePanel).key)\n    ? snakePanel\n    : moveSnake(snakePanel);\n  const overlap = isOverlap(applePanel, tempSnakePanel);\n  const newApplePanel = overlap ? createApplePanel() : applePanel;\n  return {\n    applePanel: newApplePanel,\n    snakePanel: overlap\n    ? moveSnakeAndAddTail(snakePanel)\n    : tempSnakePanel\n  };\n};\n\nconst zipPanelItem = (bg, tool) => (isBlank(tool) ? bg : tool);\n\nconst assignPanel = ({ applePanel, snakePanel }) => {\n  return convert2DimAry(_.zipWith(\n    convert1DimAry(applePanel),\n    convert1DimAry(snakePanel),\n    zipPanelItem));\n};\n\nconst getWindow = _.flow([assignPanel, convert1DimAry]);\n\n// check functions\n\nconst getHeadItem = _.flow([\n  _.cloneDeep,\n  convert1DimAry,\n  fp.filter(isNotBlank),\n  fp.sortBy('index'),\n  _.head\n]);\n\nconst getNextItem = (snakePanel, key) => {\n  const headItem = getHeadItem(snakePanel);\n  const { row, column } = getNewRowColumn(headItem, key);\n  return snakePanel && snakePanel[row] && snakePanel[row][column] ? snakePanel[row][column] : undefined;\n};\nconst nextItemIsBlank = _.flow([getNextItem, isBlank]);\nconst nextItemIsOutOfRange = _.flow([getNextItem, _.isUndefined]);\n\nconst arrowKey = ({ applePanel, snakePanel, key }) => {\n  const headItem = getHeadItem(snakePanel);\n  const origKey = snakePanel[headItem.row][headItem.column].key;\n  snakePanel[headItem.row][headItem.column].key = nextItemIsBlank(snakePanel, key) ? key : origKey;\n  return {\n    applePanel,\n    snakePanel\n  };\n};\n\nconst nop = (nop) => (nop);\n\n// key definition\n\nconst keyFnList = [\n  { key: LEFT , fn: arrowKey },\n  { key: UP   , fn: arrowKey },\n  { key: RIGHT, fn: arrowKey },\n  { key: DOWN , fn: arrowKey },\n  { key: 0    , fn: nop }\n];\n\nconst isValidKey = key => (_.some(keyFnList, (item) => (item.key === key)));\nconst validKey = ({ applePanel, snakePanel, key }) => (\n  {\n    applePanel,\n    snakePanel,\n    key: isValidKey(key) ? key : 0\n  }\n);\n\nconst storeKey = ({ applePanel, snakePanel, key }) => (\n  _.find(keyFnList, (item) => (\n    item.key === key\n  )).fn({ applePanel, snakePanel, key })\n);\n\nconst processKey = _.flow([validKey, storeKey]);\n\n// components\n\nconst createBlocks = ary => (\n  ary.map(\n    (item, index) => (\n      <Block color={item.color} row={item.row} column={item.column} key={index} />\n    )\n  )\n);\n\nconst Block = props => (\n  <div className=\"block\" style={{backgroundColor: props.color}}></div>\n);\nconst Blocks = props => (createBlocks(props.window));\n\nconst createApplePanel = _.flow([createPanel, paintApple]);\nconst createSnakePanel = _.flow([createPanel, paintSnake]);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      applePanel: createApplePanel(),\n      snakePanel: createSnakePanel()\n    };\n\n    this.state.timer = setInterval(() => {\n      this.setState((state) => {\n        return updatePanel({\n          applePanel: state.applePanel,\n          snakePanel: state.snakePanel\n        });\n      });\n    }, CONFIG.tickTime);\n\n    keyboard.keyPressed(e => {\n      setTimeout(() => {\n        this.setState((state) => {\n          return processKey({\n            applePanel: state.applePanel,\n            snakePanel: state.snakePanel,\n            key: e.which\n          });\n        });\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"App\">\n          <Blocks window={getWindow( {\n            applePanel: this.state.applePanel,\n            snakePanel: this.state.snakePanel\n          })} />\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}